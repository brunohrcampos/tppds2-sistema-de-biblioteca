{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência do Arquivo test/catch_amalgamated.hpp\par \pard\plain 
{\tc\tcl2 \v test/catch_amalgamated.hpp}
{\xe \v test/catch_amalgamated.hpp}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <type_traits>}\par
{\f2 #include <string>}\par
{\f2 #include <chrono>}\par
{\f2 #include <cstddef>}\par
{\f2 #include <iosfwd>}\par
{\f2 #include <cassert>}\par
{\f2 #include <cstring>}\par
{\f2 #include <vector>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <cmath>}\par
{\f2 #include <exception>}\par
{\f2 #include <ostream>}\par
{\f2 #include <ctime>}\par
{\f2 #include <ratio>}\par
{\f2 #include <cstdint>}\par
{\f2 #include <map>}\par
{\f2 #include <memory>}\par
{\f2 #include <sstream>}\par
{\f2 #include <tuple>}\par
{\f2 #include <climits>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Context}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::TestFailureException}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to signal that an assertion macro failed. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::TestSkipException}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Used to signal that the remainder of a test should be skipped. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::StringRef}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ResultWas}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ResultDisposition}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Detail::unique_ptr< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IResultCapture}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Detail::NonCopyable}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Deriving classes become noncopyable and nonmovable. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::WarnAbout}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::WaitForKeypress}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IConfig}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IRegistryHub}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IMutableRegistryHub}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Estimate< Type >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::OutlierClassification}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::BenchmarkInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::BenchmarkStats< Dummy >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::EnvironmentEstimate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Environment}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::true_given< typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::is_callable_tester}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::is_callable< Fun(Args...)>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::ChronometerConcept}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::ChronometerModel< Clock >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Chronometer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::is_related< T, U >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::BenchmarkFunction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::repeater< Fun >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::CompleteType< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::CompleteType< void >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::CompleteType< void >::type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::CompleteInvoker< Result >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::CompleteInvoker< void >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Timing< Result >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::ExecutionPlan}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::bootstrap_analysis}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::SampleAnalysis}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Benchmark}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Benchmark::Detail::ObjectStorage< T, Destruct >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ReusableStringStream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::make_void<... >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::EnumInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IMutableEnumValuesRegistry}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch_global_namespace_dummy}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Detail::IsStreamInsertable< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< T, typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::string >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< char const * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< char * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::wstring >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< wchar_t const * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< wchar_t * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< char[SZ]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< signed char[SZ]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< unsigned char[SZ]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< int >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< long >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< long long >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< unsigned int >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< unsigned long >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< unsigned long long >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< bool >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< char >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< signed char >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< unsigned char >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::nullptr_t >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< float >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< double >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< R C::* >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::is_range_impl< T, typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::is_range_impl< T, void_t< decltype(begin(std::declval< T >()))> >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::is_range< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< R, std::enable_if_t< is_range< R >::value &&!::Catch::Detail::IsStreamInsertable< R >::value > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< T[SZ]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< Ratio >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< std::atto >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< std::femto >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< std::pico >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< std::nano >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< std::micro >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ratio_string< std::milli >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::chrono::duration< Value, Ratio > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::chrono::duration< Value, std::ratio< 1 > > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::chrono::duration< Value, std::ratio< 60 > > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::chrono::duration< Value, std::ratio< 3600 > > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::chrono::time_point< Clock, Duration > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< std::chrono::time_point< std::chrono::system_clock, Duration > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Approx}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StringMaker< Catch::Approx >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::SourceLineInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::AssertionInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::LazyExpression}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::AssertionResultData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::AssertionResult}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::WildcardPattern}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::TestSpec}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::TestSpec::FilterMatch}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Optional< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ReporterSpec}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ProcessedReporterSpec}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::ConfigData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Config}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::StreamEndStop}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::MessageInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::MessageStream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ScopedMessage}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Capturer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Counts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Totals}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::SectionInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::SectionEndInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::accept_many_t}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::fake_arg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::is_unary_function< F, typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::is_unary_function< F, Catch::Detail::void_t< decltype(std::declval< F >()(fake_arg())) > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::UnaryLambdaTraits< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::UnaryLambdaTraits< ReturnT(ClassT::*)(Args...) const >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::UnaryLambdaTraits< ReturnT(ClassT::*)(ArgT) const >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::Token}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::TokenStream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ResultBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ResultValueBase< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ResultValueBase< void >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::BasicResult< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ParseState}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::HelpColumns}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundRef}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundValueRefBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundFlagRefBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundValueRef< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundValueRef< std::vector< T > >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundFlagRef}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::LambdaInvoker< ReturnType >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::LambdaInvoker< void >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundLambda< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundManyLambda< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Detail::BoundFlagLambda< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ParserBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ComposableParserImpl< DerivedT >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Detail::ParserRefImpl< DerivedT >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Arg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Opt}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::ExeName}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Parser}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Clara::Args}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Clara::Help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Session}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::TagAlias}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::RegistrarForTagAliases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::conjunction<... >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::conjunction< B1 >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::conjunction< B1, Bn... >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::disjunction<... >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::disjunction< B1 >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::disjunction< B1, Bn... >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Detail::negation< B >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::capture_by_value< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::always_false< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ITransientExpression}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::BinaryExpr< LhsT, RhsT >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::UnaryExpr< LhsT >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ExprLhs< LhsT >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Decomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::AssertionReaction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::AssertionHandler}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Timer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Section}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ITestInvoker}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::TestInvokerAsMethod< C >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::NameAndTags}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::AutoReg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Tag}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::TestCaseInfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::TestCaseHandle}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IExceptionTranslatorRegistry}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::ExceptionTranslatorRegistrar}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::GeneratorException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::GeneratorUntypedBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::IGeneratorTracker}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::IGenerator< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::GeneratorWrapper< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::SingleValueGenerator< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::FixedValuesGenerator< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::Generators< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Catch::Generators::as< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::TakeGenerator< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::FilterGenerator< T, Predicate >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::RepeatGenerator< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::MapGenerator< T, U, Func >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::Generators::ChunkGenerator< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Catch::SimplePcg32}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Benchmark}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Generators}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b mpl_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Benchmark::Detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::literals}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Clara}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Clara::Detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Catch::Generators::Detail}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Definições e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ALL_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_BENCHMARK_ALL_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_BENCHMARK_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_PLATFORM_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_CONFIG_POSIX_SIGNALS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_CONFIG_GETENV}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_POSIX_SIGNALS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_GETENV}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_CPP11_TO_STRING}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_DISABLE_EXCEPTIONS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_GLOBAL_NEXTAFTER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_START_WARNINGS_SUPPRESSION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_IGNORE_BUT_WARN}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TRY}\~ {\b if} ((true))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CATCH_ALL}\~ {\b if} ((false))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CATCH_ANON}(type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_EXPORT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONTEXT_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_MOVE_AND_FORWARD_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_MOVE}(...)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Replacement for std::move with better compile time performance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_FORWARD}(...)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Replacement for std::forward with better compile time performance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_UNIQUE_NAME_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_COUNTER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_CONFIG_COUNTER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_COUNTER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_UNIQUE_NAME_LINE2}(name,  line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_UNIQUE_NAME_LINE}(name,  line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_UNIQUE_NAME}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_CAPTURE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_STRINGREF_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RESULT_TYPE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_UNIQUE_PTR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CLOCK_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_CONFIG_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_NONCOPYABLE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_BENCHMARK_STATS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ESTIMATE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_OUTLIER_CLASSIFICATION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ENVIRONMENT_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_EXECUTION_PLAN_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CHRONOMETER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_OPTIMIZER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_META_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REPEAT_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_MEASURE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_COMPLETE_INVOKE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TIMING_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ESTIMATE_CLOCK_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_STATS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ANALYSE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_GET_1_ARG}(arg1,  arg2, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_GET_2_ARG}(arg1,  arg2, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_BENCHMARK}(BenchmarkName,  name,  benchmarkIndex)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_BENCHMARK_ADVANCED}(BenchmarkName,  name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b BENCHMARK}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b BENCHMARK_ADVANCED}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONSTRUCTOR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_APPROX_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TOSTRING_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_WCHAR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_WCHAR}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_VOID_TYPE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REGISTER_ENUM}(enumName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REGISTER_ENUM}(enumName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ASSERTION_INFO_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_SOURCE_LINE_INFO_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_LINEINFO}\~     {\b ::Catch::SourceLineInfo}( __FILE__, static_cast<std::size_t>( __LINE__ ) )\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ASSERTION_RESULT_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_LAZY_EXPR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEST_SPEC_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_WILDCARD_PATTERN_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CASE_SENSITIVE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_OPTIONAL_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_GET_RANDOM_SEED_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_MESSAGE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_STREAM_END_STOP_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_MESSAGE_INFO_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_MSG}(macroName,  messageType,  resultDisposition, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_CAPTURE}(varName,  macroName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_INFO}(macroName,  log)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_UNSCOPED_INFO}(macroName,  log)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INFO}(msg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b UNSCOPED_INFO}(msg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN}(msg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CAPTURE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_SECTION_INFO_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TOTALS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_SESSION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_COMMANDLINE_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CLARA_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TAG_ALIAS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REGISTER_TAG_ALIAS}(alias,  spec)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEST_MACROS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEST_MACRO_IMPL_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_ASSERTION_HANDLER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_DECOMPOSER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_COMPARE_TRAITS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_DEFINE_COMPARABLE_TRAIT}(id,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_LOGICAL_TRAITS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR}(id,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR}(id,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR}(op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_STRINGIFY}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TRY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_CATCH}(capturer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REACT}(handler)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEST}(macroName,  resultDisposition, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_IF}(macroName,  resultDisposition, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_ELSE}(macroName,  resultDisposition, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NO_THROW}(macroName,  resultDisposition, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_THROWS}(macroName,  resultDisposition, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_THROWS_AS}(macroName,  exceptionType,  resultDisposition,  expr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_THROWS_STR_MATCHES}(macroName,  resultDisposition,  matcher, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_SECTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TIMER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_SECTION}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DYNAMIC_SECTION}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEST_REGISTRY_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_EXPAND1}(param)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_EXPAND2}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEF}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NOINTERNAL_CATCH_DEF}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TESTCASE2}(TestName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TESTCASE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEST_CASE_METHOD2}(TestName,  ClassName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEST_CASE_METHOD}(ClassName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_METHOD_AS_TEST_CASE}(QualifiedMethod, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REGISTER_TESTCASE}(Function, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS}(expr,  exceptionType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECKED_IF}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECKED_ELSE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOFAIL}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS}(expr,  exceptionType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_METHOD}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b METHOD_AS_TEST_CASE}(method, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_TEST_CASE}(Function, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SECTION}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DYNAMIC_SECTION}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL_CHECK}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SUCCEED}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SKIP}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STATIC_REQUIRE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STATIC_REQUIRE_FALSE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STATIC_CHECK}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STATIC_CHECK_FALSE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_METHOD}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GIVEN}(desc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_GIVEN}(desc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WHEN}(desc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_WHEN}(desc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b THEN}(desc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_THEN}(desc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_PREPROCESSOR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSION_LEVEL0}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSION_LEVEL1}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSION_LEVEL2}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSION_LEVEL3}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSION_LEVEL4}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSION_LEVEL5}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RECURSE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_END}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_OUT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_EMPTY}()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_DEFER}(id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_GET_END2}()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_GET_END1}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_GET_END}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_NEXT0}(test,  next, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_NEXT1}(test,  next)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_NEXT}(test,  next)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST0}(f,  {\b x},  peek, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST1}(f,  {\b x},  peek, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST2}(f,  {\b x},  peek, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST0_UD}(f,  userdata,  {\b x},  peek, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST1_UD}(f,  userdata,  {\b x},  peek, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST2_UD}(f,  userdata,  {\b x},  peek, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST_UD}(f,  userdata, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_REC_LIST}(f, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_STRINGIZE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_STRINGIZE2}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS}(param)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_MAKE_NAMESPACE2}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_MAKE_NAMESPACE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_MAKE_TYPE_LIST2}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_MAKE_TYPE_LIST}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_1_ARG}(_0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_2_ARG}(_0,  _1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_3_ARG}(_0,  _1,  _2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_4_ARG}(_0,  _1,  _2,  _3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_5_ARG}(_0,  _1,  _2,  _3,  _4)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_6_ARG}(_0,  _1,  _2,  _3,  _4,  _5)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_7_ARG}(_0,  _1,  _2,  _3,  _4,  _5,  _6)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_8_ARG}(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_9_ARG}(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_10_ARG}(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_11_ARG}(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_VA_NARGS_IMPL}(_0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10,  N, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TYPE_GEN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_1}(signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST0}(TestName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST1}(TestName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST_X}(TestName,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST0}(TestName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST1}(TestName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST_X}(TestName,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_REGISTER0}(TestFunc,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_REGISTER}(TestFunc,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_REGISTER_METHOD0}(TestName,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_REGISTER_METHOD}(TestName,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0}(TestName,  ClassName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1}(TestName,  ClassName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X}(TestName,  ClassName,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0}(TestName)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1}(TestName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X}(TestName,  signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_0}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_GEN}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD}(TestName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD}(TestName,  ClassName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_REG_METHOD_GEN}(TestName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_NTTP_REG_GEN}(TestFunc, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DEFINE_SIG_TEST}(TestName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_DECLARE_SIG_TEST}(TestName, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_REMOVE_PARENS_GEN}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_TEST_CASE_2}(TestName,  TestFunc,  Name,  Tags,  Signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_TEST_CASE}(Name,  Tags, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG}(Name,  Tags,  Signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2}(TestName,  TestFuncName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE}(Name,  Tags, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG}(Name,  Tags,  Signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2}(TestName,  TestFunc,  Name,  Tags,  TmplList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE}(Name,  Tags,  TmplList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2}(TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD}(ClassName,  Name,  Tags, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG}(ClassName,  Name,  Tags,  Signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2}(TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD}(ClassName,  Name,  Tags, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG}(ClassName,  Name,  Tags,  Signature, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2}(TestNameClass,  TestName,  ClassName,  Name,  Tags,  TmplList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD}(ClassName,  Name,  Tags,  TmplList)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_TEST_CASE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_TEST_CASE_SIG}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_TEST_CASE_METHOD}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_TEST_CASE_METHOD_SIG}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_PRODUCT_TEST_CASE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_PRODUCT_TEST_CASE_SIG}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_PRODUCT_TEST_CASE_METHOD}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_LIST_TEST_CASE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEMPLATE_LIST_TEST_CASE_METHOD}(className, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TEST_CASE_INFO_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TRANSLATE_EXCEPTION2}(translatorName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INTERNAL_CATCH_TRANSLATE_EXCEPTION}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_TRANSLATE_EXCEPTION}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_VERSION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_VERSION_MACROS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_VERSION_MAJOR}\~ 3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_VERSION_MINOR}\~ 6\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_VERSION_PATCH}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_GENERATORS_ALL_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_GENERATORS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_INTERNAL_GENERATOR_STRINGIZE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GENERATE}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GENERATE_COPY}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GENERATE_REF}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_GENERATORS_RANDOM_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SizedUnsignedTypeHelper}(TYPE)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CarryBits}({\b x})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Definições de Tipos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Benchmark::IDuration} = std::chrono::nanoseconds\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Benchmark::FDuration} = std::chrono::duration<double, std::nano>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock > using {\b Catch::Benchmark::TimePoint} = typename Clock::time_point\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Benchmark::default_clock} = std::chrono::steady_clock\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Generators::GeneratorBasePtr} = {\b Catch::Detail::unique_ptr}<{\b GeneratorUntypedBase}>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::IReporterFactoryPtr} = {\b Detail::unique_ptr}<IReporterFactory>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Func , typename... U> using {\b Catch::FunctionReturnType} = std::remove_reference_t<std::remove_cv_t<std::result_of_t<Func(U...)>>>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > using {\b Catch::Benchmark::Detail::CompleteType_t} = typename {\b CompleteType}<T>::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Func , typename... Args> using {\b Catch::Benchmark::TimingOf} = {\b Timing}<{\b Detail::CompleteType_t}<{\b FunctionReturnType}<Func, Args...>>>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock , typename Fun > using {\b Catch::Benchmark::Detail::run_for_at_least_argument_t} = std::conditional_t<{\b is_callable}<Fun({\b Chronometer})>{\b ::value}, {\b Chronometer}, int>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Benchmark::Detail::sample} = std::vector<double>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > using {\b Catch::Benchmark::storage_for} = {\b Detail::ObjectStorage}<T, true>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > using {\b Catch::Benchmark::destructable_object} = {\b Detail::ObjectStorage}<T, false>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename... Ts> using {\b Catch::Detail::void_t} = typename {\b make_void}<Ts...>::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Clara::Detail::Result} = {\b BasicResult}<void>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Clara::Detail::ParserResult} = {\b BasicResult}<{\b ParseResultType}>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::Clara::Detail::InternalParseResult} = {\b BasicResult}<{\b ParseState}>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > using {\b Catch::Detail::RemoveCVRef_t} = std::remove_cv_t<std::remove_reference_t<T>>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::exceptionTranslateFunction} = std::string(*)()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b Catch::ExceptionTranslators} = std::vector<{\b Detail::unique_ptr}<{\b IExceptionTranslator} const>>\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > using {\b Catch::Generators::GeneratorPtr} = {\b Catch::Detail::unique_ptr}<{\b IGenerator}<T>>\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerações\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::Verbosity} \{ {\b Catch::Quiet} = 0
, {\b Catch::Normal}
, {\b Catch::High}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::ShowDurations} \{ {\b Catch::DefaultForReporter}
, {\b Catch::Always}
, {\b Catch::Never}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::TestRunOrder} \{ {\b Catch::Declared}
, {\b Catch::LexicographicallySorted}
, {\b Catch::Randomized}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::ColourMode} : std::uint8_t \{ {\b Catch::PlatformDefault}
, {\b Catch::ANSI}
, {\b Catch::Win32}
, {\b Catch::None}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::CaseSensitive} \{ {\b Catch::Yes}
, {\b Catch::No}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::GenerateFrom} \{ {\b Catch::Time}
, {\b Catch::RandomDevice}
, {\b Catch::Default}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::Clara::ParseResultType} \{ {\b Catch::Clara::Matched}
, {\b Catch::Clara::NoMatch}
, {\b Catch::Clara::ShortCircuitAll}
, {\b Catch::Clara::ShortCircuitSame}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::Clara::Detail::TokenType} \{ {\b Catch::Clara::Detail::Option}
, {\b Catch::Clara::Detail::Argument}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::Clara::Detail::ResultType} \{ {\b Catch::Clara::Detail::Ok}
, {\b Catch::Clara::Detail::LogicError}
, {\b Catch::Clara::Detail::RuntimeError}
 \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Denotes type of a parsing result. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::Clara::Detail::Optionality} \{ {\b Catch::Clara::Detail::Optional}
, {\b Catch::Clara::Detail::Required}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Catch::TestCaseProperties} : uint8_t \{ {\b Catch::None} = 0
, {\b Catch::IsHidden} = 1 << 1
, {\b Catch::ShouldFail} = 1 << 2
, {\b Catch::MayFail} = 1 << 3
, {\b Catch::Throws} = 1 << 4
, {\b Catch::NonPortable} = 1 << 5
, {\b Catch::Benchmark} = 1 << 6
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b Catch::getCurrentMutableContext} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} const & {\b Catch::getCurrentContext} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::cleanUpContext} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SimplePcg32} & {\b Catch::sharedRng} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::throw_test_failure_exception} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::throw_test_skip_exception} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::operator""_sr} (char const *rawChars, std::size_t size) noexcept -> {\b StringRef}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b operator""_catch_sr} (char const *rawChars, std::size_t size) noexcept -> {\b Catch::StringRef}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Catch::isOk} ({\b ResultWas::OfType} resultType)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Catch::isJustInfo} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultDisposition::Flags} {\b Catch::operator|} ({\b ResultDisposition::Flags} lhs, {\b ResultDisposition::Flags} rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Catch::shouldContinueOnFailure} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Catch::isFalseTest} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b Catch::shouldSuppressFailure} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename... Args> {\b unique_ptr}< T > {\b Catch::Detail::make_unique} (Args &&... args)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IResultCapture} & {\b Catch::getResultCapture} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IRegistryHub} const & {\b Catch::getRegistryHub} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IMutableRegistryHub} & {\b Catch::getMutableRegistryHub} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::cleanUp} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b Catch::translateActiveException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b Catch::Benchmark::deoptimize_value} (T &&{\b x})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Fn , typename... Args> auto {\b Catch::Benchmark::invoke_deoptimized} (Fn &&fn, Args &&... args) -> std::enable_if_t<!std::is_same< void, decltype(fn(args...))>{\b ::value} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Fun > {\b repeater}< std::decay_t< Fun > > {\b Catch::Benchmark::Detail::repeat} (Fun &&fun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Fun , typename... Args> {\b CompleteType_t}< {\b FunctionReturnType}< Fun, Args... > > {\b Catch::Benchmark::Detail::complete_invoke} (Fun &&fun, Args &&... args)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Fun > {\b Detail::CompleteType_t}< {\b FunctionReturnType}< Fun > > {\b Catch::Benchmark::user_code} (Fun &&fun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock , typename Fun , typename... Args> {\b TimingOf}< Fun, Args... > {\b Catch::Benchmark::Detail::measure} (Fun &&fun, Args &&... args)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock , typename Fun > {\b TimingOf}< Fun, int > {\b Catch::Benchmark::Detail::measure_one} (Fun &&fun, int iters, std::false_type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock , typename Fun > {\b TimingOf}< Fun, {\b Chronometer} > {\b Catch::Benchmark::Detail::measure_one} (Fun &&fun, int iters, std::true_type)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::Benchmark::Detail::throw_optimized_away_error} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock , typename Fun > {\b TimingOf}< Fun, {\b run_for_at_least_argument_t}< Clock, Fun > > {\b Catch::Benchmark::Detail::run_for_at_least} ({\b IDuration} how_long, const int initial_iterations, Fun &&fun)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b Catch::Benchmark::Detail::weighted_average_quantile} (int k, int q, double *first, double *last)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b OutlierClassification} {\b Catch::Benchmark::Detail::classify_outliers} (double const *first, double const *last)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b Catch::Benchmark::Detail::mean} (double const *first, double const *last)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b Catch::Benchmark::Detail::normal_cdf} (double {\b x})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b Catch::Benchmark::Detail::erfc_inv} (double {\b x})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b Catch::Benchmark::Detail::normal_quantile} (double {\b p})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Estimate}< double > {\b Catch::Benchmark::Detail::bootstrap} (double confidence_level, double *first, double *last, {\b sample} const &resample, double(*estimator)(double const *, double const *))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b bootstrap_analysis} {\b Catch::Benchmark::Detail::analyse_samples} (double confidence_level, unsigned int n_resamples, double *first, double *last)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock > std::vector< double > {\b Catch::Benchmark::Detail::resolution} (int k)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock > int {\b Catch::Benchmark::Detail::warmup} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock > {\b EnvironmentEstimate} {\b Catch::Benchmark::Detail::estimate_clock_resolution} (int iterations)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock > {\b EnvironmentEstimate} {\b Catch::Benchmark::Detail::estimate_clock_cost} ({\b FDuration} {\b resolution})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Clock > {\b Environment} {\b Catch::Benchmark::Detail::measure_environment} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SampleAnalysis} {\b Catch::Benchmark::Detail::analyse} (const {\b IConfig} &cfg, {\b FDuration} *first, {\b FDuration} *last)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ostream & {\b operator<<} (std::ostream &, {\b Catch_global_namespace_dummy})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::size_t {\b Catch::Detail::catch_strnlen} (const char *str, std::size_t n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b Catch::Detail::convertIntoString} ({\b StringRef} string, bool escapeInvisibles)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Encases `string in quotes, and optionally escapes invisibles. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b Catch::Detail::convertIntoString} ({\b StringRef} string)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Encases {\f2 string}  in quotes, and escapes invisibles if user requested it via CLI. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b Catch::Detail::rawMemoryToString} (const void *object, std::size_t size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > std::string {\b Catch::Detail::rawMemoryToString} (const T &object)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename E > std::string {\b Catch::Detail::convertUnknownEnumToString} (E e)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > std::enable_if_t< !std::is_enum< T >{\b ::value} &&!std::is_base_of< std::exception, T >{\b ::value}, std::string > {\b Catch::Detail::convertUnstreamable} (T const &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > std::enable_if_t< !std::is_enum< T >{\b ::value} &&std::is_base_of< std::exception, T >{\b ::value}, std::string > {\b Catch::Detail::convertUnstreamable} (T const &ex)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > std::enable_if_t< std::is_enum< T >{\b ::value}, std::string > {\b Catch::Detail::convertUnstreamable} (T const &{\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > std::string {\b Catch::Detail::stringify} (const T &e)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename InputIterator , typename Sentinel  = InputIterator> std::string {\b Catch::Detail::rangeToString} (InputIterator first, Sentinel last)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Range > std::string {\b Catch::rangeToString} (Range const &range)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Allocator > std::string {\b Catch::rangeToString} (std::vector< bool, Allocator > const &v)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} {\b Catch::literals::operator""_a} (long double val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} {\b Catch::literals::operator""_a} (unsigned long long val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::uint32_t {\b Catch::generateRandomSeed} ({\b GenerateFrom} from)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b Catch::Detail::splitReporterSpec} ({\b StringRef} reporterSpec)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Splits the reporter spec into reporter name and kv-pair options. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Optional}< {\b ColourMode} > {\b Catch::Detail::stringToColourMode} ({\b StringRef} colourMode)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Optional}< {\b ReporterSpec} > {\b Catch::parseReporterSpec} ({\b StringRef} reporterSpec)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::uint32_t {\b Catch::getSeed} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns Catch2's current RNG seed. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b ParserResult} {\b Catch::Clara::Detail::convertInto} (std::string const &source, T &target)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParserResult} {\b Catch::Clara::Detail::convertInto} (std::string const &source, std::string &target)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParserResult} {\b Catch::Clara::Detail::convertInto} (std::string const &source, bool &target)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename ArgType , typename L > auto {\b Catch::Clara::Detail::invokeLambda} (L const &lambda, std::string const &arg) -> {\b ParserResult}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Clara::Parser} {\b Catch::makeCommandLineParser} ({\b ConfigData} &config)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::formatReconstructedExpression} (std::ostream &os, std::string const &lhs, {\b StringRef} op, std::string const &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::handleExceptionMatchExpr} ({\b AssertionHandler} &handler, std::string const &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Detail::unique_ptr}< {\b ITestInvoker} > {\b Catch::makeTestInvoker} (void(*testAsFunction)())\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename C > {\b Detail::unique_ptr}< {\b ITestInvoker} > {\b Catch::makeTestInvoker} (void(C::*testAsMethod)())\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Detail::unique_ptr}< {\b TestCaseInfo} > {\b Catch::makeTestCaseInfo} ({\b StringRef} _className, {\b NameAndTags} const &nameAndTags, {\b SourceLineInfo} const &_lineInfo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::Detail::registerTranslatorImpl} ({\b Detail::unique_ptr}< {\b IExceptionTranslator} > &&translator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Version} const & {\b Catch::libraryVersion} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Catch::Generators::Detail::throw_generator_exception} (char const *msg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Throws {\b GeneratorException} with the provided message. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename DecayedT  = std::decay_t<T>> {\b GeneratorWrapper}< DecayedT > {\b Catch::Generators::value} (T &&value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b GeneratorWrapper}< T > {\b Catch::Generators::values} (std::initializer_list< T > values)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename... Ts> {\b GeneratorWrapper}< std::tuple< std::decay_t< Ts >... > > {\b Catch::Generators::table} (std::initializer_list< std::tuple< std::decay_t< Ts >... > > tuples)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename... Gs> auto {\b Catch::Generators::makeGenerators} ({\b GeneratorWrapper}< T > &&generator, Gs &&... moreGenerators) -> {\b Generators}< T >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > auto {\b Catch::Generators::makeGenerators} ({\b GeneratorWrapper}< T > &&generator) -> {\b Generators}< T >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename... Gs> auto {\b Catch::Generators::makeGenerators} (T &&val, Gs &&... moreGenerators) -> {\b Generators}< std::decay_t< T > >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename U , typename... Gs> auto {\b Catch::Generators::makeGenerators} ({\b as}< T >, U &&val, Gs &&... moreGenerators) -> {\b Generators}< T >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IGeneratorTracker} * {\b Catch::Generators::acquireGeneratorTracker} ({\b StringRef} generatorName, {\b SourceLineInfo} const &lineInfo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IGeneratorTracker} * {\b Catch::Generators::createGeneratorTracker} ({\b StringRef} generatorName, {\b SourceLineInfo} lineInfo, {\b GeneratorBasePtr} &&generator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > auto {\b Catch::Generators::generate} ({\b StringRef} generatorName, {\b SourceLineInfo} const &lineInfo, L const &generatorExpression) -> typename decltype(generatorExpression())::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b GeneratorWrapper}< T > {\b Catch::Generators::take} (size_t target, {\b GeneratorWrapper}< T > &&generator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename Predicate > {\b GeneratorWrapper}< T > {\b Catch::Generators::filter} (Predicate &&pred, {\b GeneratorWrapper}< T > &&generator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b GeneratorWrapper}< T > {\b Catch::Generators::repeat} (size_t repeats, {\b GeneratorWrapper}< T > &&generator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Func , typename U , typename T  = FunctionReturnType<Func, U>> {\b GeneratorWrapper}< T > {\b Catch::Generators::map} (Func &&function, {\b GeneratorWrapper}< U > &&generator)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b GeneratorWrapper}< std::vector< T > > {\b Catch::Generators::chunk} (size_t size, {\b GeneratorWrapper}< T > &&generator)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variáveis\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::warmup_iterations} = 10000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::warmup_time} = std::chrono::milliseconds(100)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::minimum_ticks} = 1000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::warmup_seed} = 10000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::clock_resolution_estimation_time} = std::chrono::milliseconds(500)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::clock_cost_estimation_time_limit} = std::chrono::seconds(1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::clock_cost_estimation_tick_limit} = 100000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::clock_cost_estimation_time} = std::chrono::milliseconds(10)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Catch::Benchmark::Detail::clock_cost_estimation_iterations} = 10000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\b StringRef} {\b Catch::Detail::unprintableString} = "\{?\}"_sr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\b accept_many_t} {\b Catch::Clara::accept_many} \{\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is a convenience header for Catch2. It includes {\b all}  of Catch2 headers.\par
Generally the Catch2 users should use specific includes they need, but this header can be used instead for ease-of-experimentation, or just plain convenience, at the cost of (significantly) increased compilation times.\par
When a new header is added to either the top level folder, or to the corresponding internal subfolder, it should be added here. Headers added to the various subparts (e.g. matchers, generators, etc...), should go their respective catch-all headers.\par
This is a convenience header for Catch2's benchmarking. It includes {\b all}  of Catch2 headers related to benchmarking.\par
Generally the Catch2 users should use specific includes they need, but this header can be used instead for ease-of-experimentation, or just plain convenience, at the cost of (significantly) increased compilation times.\par
When a new header is added to either the {\f2 benchmark}  folder, or to the corresponding internal (detail) subfolder, it should be added here.\par
Wrapper for the CONFIG configuration option\par
When generating internal unique names, there are two options. Either we mix in the current line number, or mix in an incrementing number. We prefer the latter, using {\f2 __COUNTER__} , but users might want to use the former.\par
Wrapper for the WCHAR configuration option\par
We want to support platforms that do not provide {\f2 wchar_t} , so we sometimes have to disable providing wchar_t overloads through Catch2, e.g. the StringMaker specialization for {\f2 std::wstring} .\par
Wrapper for the CATCH_CONFIG_PREFIX_MESSAGES configuration option\par
CATCH_CONFIG_PREFIX_ALL can be used to avoid clashes with other macros by prepending CATCH_. This may not be desirable if the only clashes are with logger macros such as INFO and WARN. In this cases CATCH_CONFIG_PREFIX_MESSAGES can be used to only prefix a small subset of relevant macros.\par
Why does decomposing look the way it does:\par
Conceptually, decomposing is simple. We change {\f2 REQUIRE( a == b )}  into {\f2 Decomposer\{\} <= a == b} , so that {\f2 Decomposer\{\} <= a}  is evaluated first, and our custom operator is used for {\f2 a == b} , because {\f2 a}  is transformed into {\f2 ExprLhs<T&>}  and then into {\f2 BinaryExpr<T&, U&>} .\par
In practice, decomposing ends up a mess, because we have to support various fun things.\par
1) Types that are only comparable with literal 0, and they do this by comparing against a magic type with pointer constructor and deleted other constructors. Example: {\f2 REQUIRE((a <=> b) == 0)}  in libstdc++\par
2) Types that are only comparable with literal 0, and they do this by comparing against a magic type with consteval integer constructor. Example: {\f2 REQUIRE((a <=> b) == 0)}  in current MSVC STL.\par
3) Types that have no linkage, and so we cannot form a reference to them. Example: some implementations of traits.\par
4) Starting with C++20, when the compiler sees {\f2 a == b} , it also uses {\f2 b == a}  when constructing the overload set. For us this means that when the compiler handles {\f2 ExprLhs<T> == b} , it also tries to resolve the overload set for {\f2 b == ExprLhs<T>} .\par
To accomodate these use cases, decomposer ended up rather complex.\par
1) These types are handled by adding SFINAE overloads to our comparison operators, checking whether {\f2 T == U}  are comparable with the given operator, and if not, whether T (or U) are comparable with literal 0. If yes, the overload compares T (or U) with 0 literal inline in the definition.\par
Note that for extra correctness, we check that the other type is either an {\f2 int}  (literal 0 is captured as {\f2 int}  by templates), or a {\f2 long}  (some platforms use 0L for {\f2 NULL}  and we want to support that for pointer comparisons).\par
2) For these types, {\f2 is_foo_comparable<T, int>}  is true, but letting them fall into the overload that actually does {\f2 T == int}  causes compilation error. Handling them requires that the decomposition is {\f2 constexpr} , so that P2564R3 applies and the {\f2 consteval}  from their accompanying magic type is propagated through the {\f2 constexpr}  call stack.\par
However this is not enough to handle these types automatically, because our default is to capture types by reference, to avoid runtime copies. While these references cannot become dangling, they outlive the constexpr context and thus the default capture path cannot be actually constexpr.\par
The solution is to capture these types by value, by explicitly specializing {\f2 {\b Catch::capture_by_value}}  for them. Catch2 provides specialization for {\f2 std::foo_ordering} s, but users can specialize the trait for their own types as well.\par
3) If a type has no linkage, we also cannot capture it by reference. The solution is once again to capture them by value. We handle the common cases by using {\f2 std::is_arithmetic}  as the default for {\f2 {\b Catch::capture_by_value}} , but that is only a some-effort heuristic. But as with 2), users can specialize {\f2 capture_by_value}  for their own types as needed.\par
4) To support C++20 and make the SFINAE on our decomposing operators work, the SFINAE has to happen in return type, rather than in a template type. This is due to our use of logical type traits ({\f2 conjunction} /{\f2 disjunction} /{\f2 negation} ), that we use to workaround an issue in older (9-) versions of GCC. I still blame C++20 for this, because without the comparison order switching, the logical traits could still be used in template type.\par
There are also other side concerns, e.g. supporting both {\f2 {\b REQUIRE(a)}}  and {\f2 REQUIRE(a == b)} , or making {\f2 REQUIRE_THAT(a, IsEqual(b))}  slot nicely into the same expression handling logic, but these are rather straightforward and add only a bit of complexity (e.g. common base class for decomposed expressions).\par
Wrapper for the STATIC_ANALYSIS_SUPPORT configuration option\par
Some of Catch2's macros can be defined differently to work better with static analysis tools, like clang-tidy or coverity. Currently the main use case is to show that {\f2 SECTION} s are executed exclusively, and not all in one run of a {\f2 TEST_CASE} .\par
This is a convenience header for Catch2's Generator support. It includes {\b all}  of Catch2 headers related to generators.\par
Generally the Catch2 users should use specific includes they need, but this header can be used instead for ease-of-experimentation, or just plain convenience, at the cost of (significantly) increased compilation times.\par
When a new header is added to either the {\f2 generators}  folder, or to the corresponding internal subfolder, it should be added here. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Definições e macros\par
\pard\plain 
{\xe \v AND_GIVEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:AND_GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_GIVEN( desc)}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( {\cf22 "And given: "} << desc )\par
}
}
{\xe \v AND_THEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_THEN( desc)}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( {\cf22 "      And: "} << desc )\par
}
}
{\xe \v AND_WHEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_WHEN( desc)}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( {\cf22 " And when: "} << desc )\par
}
}
{\xe \v BENCHMARK\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:BENCHMARK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define BENCHMARK( ...)}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2199 {\cf21 #define BENCHMARK(...) \\}\par
2200 {\cf21     INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))}\par
}
}
{\xe \v BENCHMARK_ADVANCED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:BENCHMARK_ADVANCED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define BENCHMARK_ADVANCED( name)}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), name)\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2201 {\cf21 #define BENCHMARK_ADVANCED(name) \\}\par
2202 {\cf21     INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), name)}\par
}
}
{\xe \v CAPTURE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CAPTURE( ...)}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_CAPTURE( INTERNAL_CATCH_UNIQUE_NAME(capturer), {\cf22 "CAPTURE"}, __VA_ARGS__ )\par
}
}
{\xe \v CarryBits\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CarryBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CarryBits( {\b x})}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ( x >> 32 )\par
}
}
{\xe \v CATCH_ALL_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ALL_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ALL_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ANALYSE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ANALYSE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ANALYSE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_APPROX_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_APPROX_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_APPROX_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ASSERTION_HANDLER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ASSERTION_HANDLER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ASSERTION_HANDLER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ASSERTION_INFO_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ASSERTION_INFO_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ASSERTION_INFO_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ASSERTION_RESULT_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ASSERTION_RESULT_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ASSERTION_RESULT_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_BENCHMARK_ALL_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_BENCHMARK_ALL_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_BENCHMARK_ALL_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_BENCHMARK_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_BENCHMARK_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_BENCHMARK_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_BENCHMARK_STATS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_BENCHMARK_STATS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_BENCHMARK_STATS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CASE_SENSITIVE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CASE_SENSITIVE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CASE_SENSITIVE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CATCH_ALL\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CATCH_ALL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CATCH_ALL\~ {\b if} ((false))}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CATCH_ANON\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CATCH_ANON}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CATCH_ANON( type)}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf19 if} (({\cf17 false}))\par
}
}
{\xe \v CATCH_CHRONOMETER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CHRONOMETER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CHRONOMETER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CLARA_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CLARA_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CLARA_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CLOCK_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CLOCK_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CLOCK_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_COMMANDLINE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_COMMANDLINE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_COMMANDLINE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_COMPARE_TRAITS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_COMPARE_TRAITS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_COMPARE_TRAITS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_COMPLETE_INVOKE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_COMPLETE_INVOKE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_COMPLETE_INVOKE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_COUNTER\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_COUNTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_COUNTER}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_COUNTER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_COUNTER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_COUNTER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_CPP11_TO_STRING\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_CPP11_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_CPP11_TO_STRING}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_DISABLE_EXCEPTIONS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_DISABLE_EXCEPTIONS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_DISABLE_EXCEPTIONS}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_GETENV\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_GETENV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_GETENV}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_GLOBAL_NEXTAFTER\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_GLOBAL_NEXTAFTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_GLOBAL_NEXTAFTER}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_POSIX_SIGNALS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_POSIX_SIGNALS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_POSIX_SIGNALS}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_WCHAR\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_WCHAR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_WCHAR}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONFIG_WCHAR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONFIG_WCHAR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONFIG_WCHAR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONSTRUCTOR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONSTRUCTOR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONSTRUCTOR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_CONTEXT_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_CONTEXT_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_CONTEXT_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_DECOMPOSER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_DECOMPOSER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_DECOMPOSER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_DEFER\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_DEFER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_DEFER( id)}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf18 id} CATCH_EMPTY()\par
}
}
{\xe \v CATCH_DEFINE_COMPARABLE_TRAIT\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_DEFINE_COMPARABLE_TRAIT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_DEFINE_COMPARABLE_TRAIT( id,  op)}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename}, {\cf17 typename}, {\cf17 typename} = {\cf18 void}>                            \\\par
    {\cf17 struct }is_##id##_comparable : std::false_type \{\};                         \\\par
    {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>                                         \\\par
    {\cf17 struct }is_##id##_comparable<                                              \\\par
        T,                                                                    \\\par
        U,                                                                    \\\par
        void_t<decltype( std::declval<T>() op std::declval<U>() )>>           \\\par
        : std::true_type \{\};                                                  \\\par
    {\cf17 template} <{\cf17 typename}, {\cf17 typename} = {\cf18 void}>                                      \\\par
    {\cf17 struct }is_##id##_0_comparable : std::false_type \{\};                       \\\par
    {\cf17 template} <{\cf17 typename} T>                                                     \\\par
    {\cf17 struct }is_##id##_0_comparable<T,                                          \\\par
                                  void_t<decltype( std::declval<T>() op 0 )>> \\\par
        : std::true_type \{\};\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5072 {\cf21 #define CATCH_DEFINE_COMPARABLE_TRAIT( id, op )                               \\}\par
5073 {\cf21     template <typename, typename, typename = void>                            \\}\par
5074 {\cf21     struct is_##id##_comparable : std::false_type \{\};                         \\}\par
5075 {\cf21     template <typename T, typename U>                                         \\}\par
5076 {\cf21     struct is_##id##_comparable<                                              \\}\par
5077 {\cf21         T,                                                                    \\}\par
5078 {\cf21         U,                                                                    \\}\par
5079 {\cf21         void_t<decltype( std::declval<T>() op std::declval<U>() )>>           \\}\par
5080 {\cf21         : std::true_type \{\};                                                  \\}\par
5081 {\cf21     template <typename, typename = void>                                      \\}\par
5082 {\cf21     struct is_##id##_0_comparable : std::false_type \{\};                       \\}\par
5083 {\cf21     template <typename T>                                                     \\}\par
5084 {\cf21     struct is_##id##_0_comparable<T,                                          \\}\par
5085 {\cf21                                   void_t<decltype( std::declval<T>() op 0 )>> \\}\par
5086 {\cf21         : std::true_type \{\};}\par
}
}
{\xe \v CATCH_EMPTY\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_EMPTY()}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ENVIRONMENT_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ENVIRONMENT_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ENVIRONMENT_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ESTIMATE_CLOCK_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ESTIMATE_CLOCK_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ESTIMATE_CLOCK_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_ESTIMATE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_ESTIMATE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_ESTIMATE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_EXECUTION_PLAN_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_EXECUTION_PLAN_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_EXECUTION_PLAN_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_EXPORT\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_EXPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_EXPORT}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_FORWARD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_FORWARD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_FORWARD( ...)}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 static_cast<}decltype(__VA_ARGS__)&&{\cf17 >}(__VA_ARGS__)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Replacement for std::forward with better compile time performance. }}\par
}
{\xe \v CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_GENERATORS_ALL_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_GENERATORS_ALL_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_GENERATORS_ALL_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_GENERATORS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_GENERATORS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_GENERATORS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_GENERATORS_RANDOM_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_GENERATORS_RANDOM_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_GENERATORS_RANDOM_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_GET_RANDOM_SEED_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_GET_RANDOM_SEED_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_GET_RANDOM_SEED_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_CAPTURE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_CAPTURE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_CAPTURE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_CONFIG_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_CONFIG_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_CONFIG_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_CONFIG_COUNTER\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_CONFIG_COUNTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_CONFIG_COUNTER}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_CONFIG_GETENV\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_CONFIG_GETENV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_CONFIG_GETENV}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_CONFIG_POSIX_SIGNALS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_CONFIG_POSIX_SIGNALS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_CONFIG_POSIX_SIGNALS}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( id,  op)}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5470 {\cf21 #define CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( id, op )         \\}\par
5471 {\cf21     template <typename RhsT>                                                   \\}\par
5472 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT&& rhs )             \\}\par
5473 {\cf21         -> std::enable_if_t<                                                   \\}\par
5474 {\cf21             Detail::conjunction<Detail::is_##id##_comparable<LhsT, RhsT>,      \\}\par
5475 {\cf21                                 Detail::negation<capture_by_value<             \\}\par
5476 {\cf21                                     Detail::RemoveCVRef_t<RhsT>>>>::value,     \\}\par
5477 {\cf21             BinaryExpr<LhsT, RhsT const&>> \{                                   \\}\par
5478 {\cf21         return \{                                                               \\}\par
5479 {\cf21             static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\}\par
5480 {\cf21     \}                                                                          \\}\par
5481 {\cf21     template <typename RhsT>                                                   \\}\par
5482 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5483 {\cf21         -> std::enable_if_t<                                                   \\}\par
5484 {\cf21             Detail::conjunction<Detail::is_##id##_comparable<LhsT, RhsT>,      \\}\par
5485 {\cf21                                 capture_by_value<RhsT>>::value,                \\}\par
5486 {\cf21             BinaryExpr<LhsT, RhsT>> \{                                          \\}\par
5487 {\cf21         return \{                                                               \\}\par
5488 {\cf21             static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\}\par
5489 {\cf21     \}                                                                          \\}\par
5490 {\cf21     template <typename RhsT>                                                   \\}\par
5491 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5492 {\cf21         -> std::enable_if_t<                                                   \\}\par
5493 {\cf21             Detail::conjunction<                                               \\}\par
5494 {\cf21                 Detail::negation<Detail::is_##id##_comparable<LhsT, RhsT>>,    \\}\par
5495 {\cf21                 Detail::is_##id##_0_comparable<LhsT>,                          \\}\par
5496 {\cf21                 std::is_same<RhsT, int>>::value,                               \\}\par
5497 {\cf21             BinaryExpr<LhsT, RhsT>> \{                                          \\}\par
5498 {\cf21         if ( rhs != 0 ) \{ throw_test_failure_exception(); \}                    \\}\par
5499 {\cf21         return \{                                                               \\}\par
5500 {\cf21             static_cast<bool>( lhs.m_lhs op 0 ), lhs.m_lhs, #op##_sr, rhs \};   \\}\par
5501 {\cf21     \}                                                                          \\}\par
5502 {\cf21     template <typename RhsT>                                                   \\}\par
5503 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5504 {\cf21         -> std::enable_if_t<                                                   \\}\par
5505 {\cf21             Detail::conjunction<                                               \\}\par
5506 {\cf21                 Detail::negation<Detail::is_##id##_comparable<LhsT, RhsT>>,    \\}\par
5507 {\cf21                 Detail::is_##id##_0_comparable<RhsT>,                          \\}\par
5508 {\cf21                 std::is_same<LhsT, int>>::value,                               \\}\par
5509 {\cf21             BinaryExpr<LhsT, RhsT>> \{                                          \\}\par
5510 {\cf21         if ( lhs.m_lhs != 0 ) \{ throw_test_failure_exception(); \}              \\}\par
5511 {\cf21         return \{ static_cast<bool>( 0 op rhs ), lhs.m_lhs, #op##_sr, rhs \};    \\}\par
5512 {\cf21     \}}\par
}
}
{\xe \v CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR( id,  op)}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5416 {\cf21 #define CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR( id, op )           \\}\par
5417 {\cf21     template <typename RhsT>                                                   \\}\par
5418 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT&& rhs )             \\}\par
5419 {\cf21         -> std::enable_if_t<                                                   \\}\par
5420 {\cf21             Detail::conjunction<Detail::is_##id##_comparable<LhsT, RhsT>,      \\}\par
5421 {\cf21                                 Detail::negation<capture_by_value<             \\}\par
5422 {\cf21                                     Detail::RemoveCVRef_t<RhsT>>>>::value,     \\}\par
5423 {\cf21             BinaryExpr<LhsT, RhsT const&>> \{                                   \\}\par
5424 {\cf21         return \{                                                               \\}\par
5425 {\cf21             static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\}\par
5426 {\cf21     \}                                                                          \\}\par
5427 {\cf21     template <typename RhsT>                                                   \\}\par
5428 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5429 {\cf21         -> std::enable_if_t<                                                   \\}\par
5430 {\cf21             Detail::conjunction<Detail::is_##id##_comparable<LhsT, RhsT>,      \\}\par
5431 {\cf21                                 capture_by_value<RhsT>>::value,                \\}\par
5432 {\cf21             BinaryExpr<LhsT, RhsT>> \{                                          \\}\par
5433 {\cf21         return \{                                                               \\}\par
5434 {\cf21             static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\}\par
5435 {\cf21     \}                                                                          \\}\par
5436 {\cf21     template <typename RhsT>                                                   \\}\par
5437 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5438 {\cf21         -> std::enable_if_t<                                                   \\}\par
5439 {\cf21             Detail::conjunction<                                               \\}\par
5440 {\cf21                 Detail::negation<Detail::is_##id##_comparable<LhsT, RhsT>>,    \\}\par
5441 {\cf21                 Detail::is_eq_0_comparable<LhsT>,                              \\}\par
5442 {\cf21               }{\cf20 /* We allow long because we want `ptr op NULL` to be accepted */}{\cf21  \\}\par
5443 {\cf21                 Detail::disjunction<std::is_same<RhsT, int>,                   \\}\par
5444 {\cf21                                     std::is_same<RhsT, long>>>::value,         \\}\par
5445 {\cf21             BinaryExpr<LhsT, RhsT>> \{                                          \\}\par
5446 {\cf21         if ( rhs != 0 ) \{ throw_test_failure_exception(); \}                    \\}\par
5447 {\cf21         return \{                                                               \\}\par
5448 {\cf21             static_cast<bool>( lhs.m_lhs op 0 ), lhs.m_lhs, #op##_sr, rhs \};   \\}\par
5449 {\cf21     \}                                                                          \\}\par
5450 {\cf21     template <typename RhsT>                                                   \\}\par
5451 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5452 {\cf21         -> std::enable_if_t<                                                   \\}\par
5453 {\cf21             Detail::conjunction<                                               \\}\par
5454 {\cf21                 Detail::negation<Detail::is_##id##_comparable<LhsT, RhsT>>,    \\}\par
5455 {\cf21                 Detail::is_eq_0_comparable<RhsT>,                              \\}\par
5456 {\cf21               }{\cf20 /* We allow long because we want `ptr op NULL` to be accepted */}{\cf21  \\}\par
5457 {\cf21                 Detail::disjunction<std::is_same<LhsT, int>,                   \\}\par
5458 {\cf21                                     std::is_same<LhsT, long>>>::value,         \\}\par
5459 {\cf21             BinaryExpr<LhsT, RhsT>> \{                                          \\}\par
5460 {\cf21         if ( lhs.m_lhs != 0 ) \{ throw_test_failure_exception(); \}              \\}\par
5461 {\cf21         return \{ static_cast<bool>( 0 op rhs ), lhs.m_lhs, #op##_sr, rhs \};    \\}\par
5462 {\cf21     \}}\par
}
}
{\xe \v CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR( op)}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} RhsT>                                                   \\\par
    {\cf17 constexpr} {\cf17 friend} {\cf17 auto} {\cf17 operator} op( ExprLhs&& lhs, RhsT&& rhs )             \\\par
        -> std::enable_if_t<                                                   \\\par
            !capture_by_value<Detail::RemoveCVRef_t<RhsT>>::value,             \\\par
            BinaryExpr<LhsT, RhsT const&>> \{                                   \\\par
        {\cf19 return} \{                                                               \\\par
            static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\\par
    \}                                                                          \\\par
    {\cf17 template} <{\cf17 typename} RhsT>                                                   \\\par
    {\cf17 constexpr} {\cf17 friend} {\cf17 auto} {\cf17 operator} op( ExprLhs&& lhs, RhsT rhs )               \\\par
        -> std::enable_if_t<capture_by_value<RhsT>::value,                     \\\par
                            BinaryExpr<LhsT, RhsT>> \{                          \\\par
        {\cf19 return} \{                                                               \\\par
            static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5522 {\cf21 #define CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR( op )                        \\}\par
5523 {\cf21     template <typename RhsT>                                                   \\}\par
5524 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT&& rhs )             \\}\par
5525 {\cf21         -> std::enable_if_t<                                                   \\}\par
5526 {\cf21             !capture_by_value<Detail::RemoveCVRef_t<RhsT>>::value,             \\}\par
5527 {\cf21             BinaryExpr<LhsT, RhsT const&>> \{                                   \\}\par
5528 {\cf21         return \{                                                               \\}\par
5529 {\cf21             static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\}\par
5530 {\cf21     \}                                                                          \\}\par
5531 {\cf21     template <typename RhsT>                                                   \\}\par
5532 {\cf21     constexpr friend auto operator op( ExprLhs&& lhs, RhsT rhs )               \\}\par
5533 {\cf21         -> std::enable_if_t<capture_by_value<RhsT>::value,                     \\}\par
5534 {\cf21                             BinaryExpr<LhsT, RhsT>> \{                          \\}\par
5535 {\cf21         return \{                                                               \\}\par
5536 {\cf21             static_cast<bool>( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs \}; \\}\par
5537 {\cf21     \}}\par
}
}
{\xe \v CATCH_INTERNAL_GENERATOR_STRINGIZE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_GENERATOR_STRINGIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_GENERATOR_STRINGIZE( ...)}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL(__VA_ARGS__)\par
}
}
{\xe \v CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL( ...)}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #__VA_ARGS__##_catch_sr}\par
}
}
{\xe \v CATCH_INTERNAL_IGNORE_BUT_WARN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_IGNORE_BUT_WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_IGNORE_BUT_WARN( ...)}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_LINEINFO\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_LINEINFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_LINEINFO\~     {\b ::Catch::SourceLineInfo}( __FILE__, static_cast<std::size_t>( __LINE__ ) )}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3244 {\cf21 #define CATCH_INTERNAL_LINEINFO \\}\par
3245 {\cf21     ::Catch::SourceLineInfo( __FILE__, static_cast<std::size_t>( __LINE__ ) )}\par
}
}
{\xe \v CATCH_INTERNAL_START_WARNINGS_SUPPRESSION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_START_WARNINGS_SUPPRESSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_STRINGIFY\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_STRINGIFY( ...)}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #__VA_ARGS__##_catch_sr}\par
}
}
{\xe \v CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_LAZY_EXPR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_LAZY_EXPR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_LAZY_EXPR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_LOGICAL_TRAITS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_LOGICAL_TRAITS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_LOGICAL_TRAITS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_MEASURE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_MEASURE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_MEASURE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_MESSAGE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_MESSAGE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_MESSAGE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_MESSAGE_INFO_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_MESSAGE_INFO_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_MESSAGE_INFO_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_META_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_META_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_META_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_MOVE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_MOVE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_MOVE( ...)}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 static_cast<}std::remove_reference_t<decltype(__VA_ARGS__){\cf17 >}&&>(__VA_ARGS__)\par
}
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Replacement for std::move with better compile time performance. }}\par
}
{\xe \v CATCH_MOVE_AND_FORWARD_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_MOVE_AND_FORWARD_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_MOVE_AND_FORWARD_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_NONCOPYABLE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_NONCOPYABLE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_NONCOPYABLE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_OPTIMIZER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_OPTIMIZER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_OPTIMIZER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_OPTIONAL_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_OPTIONAL_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_OPTIONAL_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_OUTLIER_CLASSIFICATION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_OUTLIER_CLASSIFICATION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_OUTLIER_CLASSIFICATION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_PLATFORM_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_PLATFORM_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_PLATFORM_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_PREPROCESSOR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_PREPROCESSOR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_PREPROCESSOR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_REC_END\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_END( ...)}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_REC_GET_END\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_GET_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_GET_END( ...)}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_REC_GET_END1\par
}
}
{\xe \v CATCH_REC_GET_END1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_GET_END1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_GET_END1( ...)}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_REC_GET_END2\par
}
}
{\xe \v CATCH_REC_GET_END2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_GET_END2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_GET_END2()}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 0, CATCH_REC_END\par
}
}
{\xe \v CATCH_REC_LIST\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST( f,  ...)}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSE(CATCH_REC_LIST2(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))\par
}
}
{\xe \v CATCH_REC_LIST0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST0( f,  {\b x},  peek,  ...)}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid , f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REC_LIST0_UD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST0_UD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST0_UD( f,  userdata,  {\b x},  peek,  ...)}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid , f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REC_LIST1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST1( f,  {\b x},  peek,  ...)}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid , f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0) ) ( f, peek, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REC_LIST1_UD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST1_UD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST1_UD( f,  userdata,  {\b x},  peek,  ...)}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid , f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0_UD) ) ( f, userdata, peek, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REC_LIST2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST2( f,  {\b x},  peek,  ...)}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REC_LIST2_UD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST2_UD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST2_UD( f,  userdata,  {\b x},  peek,  ...)}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REC_LIST_UD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_LIST_UD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_LIST_UD( f,  userdata,  ...)}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSE(CATCH_REC_LIST2_UD(f, userdata, __VA_ARGS__, ()()(), ()()(), ()()(), 0))\par
}
}
{\xe \v CATCH_REC_NEXT\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_NEXT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_NEXT( test,  next)}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_REC_NEXT1(CATCH_REC_GET_END test, next)\par
}
}
{\xe \v CATCH_REC_NEXT0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_NEXT0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_NEXT0( test,  next,  ...)}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid next CATCH_REC_OUT\par
}
}
{\xe \v CATCH_REC_NEXT1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_NEXT1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_NEXT1( test,  next)}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_DEFER ( CATCH_REC_NEXT0 ) ( test, next, 0)\par
}
}
{\xe \v CATCH_REC_OUT\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REC_OUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REC_OUT}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_RECURSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSE( ...)}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSION_LEVEL5(__VA_ARGS__)\par
}
}
{\xe \v CATCH_RECURSION_LEVEL0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSION_LEVEL0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSION_LEVEL0( ...)}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid __VA_ARGS__\par
}
}
{\xe \v CATCH_RECURSION_LEVEL1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSION_LEVEL1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSION_LEVEL1( ...)}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(__VA_ARGS__)))\par
}
}
{\xe \v CATCH_RECURSION_LEVEL2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSION_LEVEL2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSION_LEVEL2( ...)}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(__VA_ARGS__)))\par
}
}
{\xe \v CATCH_RECURSION_LEVEL3\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSION_LEVEL3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSION_LEVEL3( ...)}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(__VA_ARGS__)))\par
}
}
{\xe \v CATCH_RECURSION_LEVEL4\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSION_LEVEL4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSION_LEVEL4( ...)}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(__VA_ARGS__)))\par
}
}
{\xe \v CATCH_RECURSION_LEVEL5\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RECURSION_LEVEL5}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RECURSION_LEVEL5( ...)}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(__VA_ARGS__)))\par
}
}
{\xe \v CATCH_REGISTER_ENUM\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REGISTER_ENUM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REGISTER_ENUM( enumName,  ...)}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REGISTER_ENUM( enumName, __VA_ARGS__ )\par
}
}
{\xe \v CATCH_REGISTER_TAG_ALIAS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REGISTER_TAG_ALIAS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REGISTER_TAG_ALIAS( alias,  spec)}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
    namespace\{ Catch::RegistrarForTagAliases INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); \} \\\par
    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5000 {\cf21 #define CATCH_REGISTER_TAG_ALIAS( alias, spec ) \\}\par
5001 {\cf21     CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
5002 {\cf21     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
5003 {\cf21     namespace\{ Catch::RegistrarForTagAliases INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); \} \\}\par
5004 {\cf21     CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}\par
}
}
{\xe \v CATCH_REPEAT_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REPEAT_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REPEAT_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_RESULT_TYPE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RESULT_TYPE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RESULT_TYPE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_SECTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_SECTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_SECTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_SECTION_INFO_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_SECTION_INFO_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_SECTION_INFO_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_SESSION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_SESSION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_SESSION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_SOURCE_LINE_INFO_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_SOURCE_LINE_INFO_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_SOURCE_LINE_INFO_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_STATS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_STATS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_STATS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_STREAM_END_STOP_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_STREAM_END_STOP_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_STREAM_END_STOP_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_STRINGREF_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_STRINGREF_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_STRINGREF_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TAG_ALIAS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TAG_ALIAS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TAG_ALIAS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEST_CASE_INFO_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEST_CASE_INFO_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEST_CASE_INFO_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEST_MACRO_IMPL_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEST_MACRO_IMPL_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEST_MACRO_IMPL_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEST_MACROS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEST_MACROS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEST_MACROS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEST_REGISTRY_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEST_REGISTRY_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEST_REGISTRY_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TEST_SPEC_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TEST_SPEC_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TEST_SPEC_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TIMER_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TIMER_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TIMER_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TIMING_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TIMING_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TIMING_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TOSTRING_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TOSTRING_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TOSTRING_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TOTALS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TOTALS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TOTALS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TRANSLATE_EXCEPTION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TRANSLATE_EXCEPTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TRANSLATE_EXCEPTION( signature)}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature )\par
}
}
{\xe \v CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_TRY\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_TRY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_TRY\~ {\b if} ((true))}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_UNIQUE_NAME_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_UNIQUE_NAME_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_UNIQUE_NAME_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_UNIQUE_PTR_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_UNIQUE_PTR_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_UNIQUE_PTR_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_VERSION_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_VERSION_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_VERSION_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_VERSION_MACROS_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_VERSION_MACROS_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_VERSION_MACROS_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_VERSION_MAJOR\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_VERSION_MAJOR\~ 3}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_VERSION_MINOR\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_VERSION_MINOR\~ 6}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_VERSION_PATCH\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_VERSION_PATCH\~ 0}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_VOID_TYPE_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_VOID_TYPE_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_VOID_TYPE_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CATCH_WILDCARD_PATTERN_HPP_INCLUDED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CATCH_WILDCARD_PATTERN_HPP_INCLUDED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CATCH_WILDCARD_PATTERN_HPP_INCLUDED}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK( ...)}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST( {\cf22 "CHECK"}, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )\par
}
}
{\xe \v CHECK_FALSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE( ...)}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST( {\cf22 "CHECK_FALSE"}, Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )\par
}
}
{\xe \v CHECK_NOFAIL\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECK_NOFAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOFAIL( ...)}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST( {\cf22 "CHECK_NOFAIL"}, Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )\par
}
}
{\xe \v CHECK_NOTHROW\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW( ...)}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_NO_THROW( {\cf22 "CHECK_NOTHROW"}, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )\par
}
}
{\xe \v CHECK_THROWS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS( ...)}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_THROWS( {\cf22 "CHECK_THROWS"}, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )\par
}
}
{\xe \v CHECK_THROWS_AS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS( expr,  exceptionType)}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_THROWS_AS( {\cf22 "CHECK_THROWS_AS"}, exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )\par
}
}
{\xe \v CHECKED_ELSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECKED_ELSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECKED_ELSE( ...)}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_ELSE( {\cf22 "CHECKED_ELSE"}, Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )\par
}
}
{\xe \v CHECKED_IF\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:CHECKED_IF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECKED_IF( ...)}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_IF( {\cf22 "CHECKED_IF"}, Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )\par
}
}
{\xe \v DYNAMIC_SECTION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:DYNAMIC_SECTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DYNAMIC_SECTION( ...)}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( __VA_ARGS__ )\par
}
}
{\xe \v FAIL\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL( ...)}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MSG( {\cf22 "FAIL"}, Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )\par
}
}
{\xe \v FAIL_CHECK\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL_CHECK( ...)}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MSG( {\cf22 "FAIL_CHECK"}, Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )\par
}
}
{\xe \v GENERATE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:GENERATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GENERATE( ...)}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\\par
                                 CATCH_INTERNAL_LINEINFO, \\\par
                                 [ ]\{ {\cf17 using namespace }Catch::Generators; {\cf19 return} makeGenerators( __VA_ARGS__ ); \} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7624 {\cf21 #define GENERATE( ... ) \\}\par
7625 {\cf21     Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\}\par
7626 {\cf21                                  CATCH_INTERNAL_LINEINFO, \\}\par
7627 {\cf21                                  [ ]\{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); \} ) }{\cf20 //NOLINT(google-build-using-namespace)}\par
}
}
{\xe \v GENERATE_COPY\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:GENERATE_COPY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GENERATE_COPY( ...)}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\\par
                                 CATCH_INTERNAL_LINEINFO, \\\par
                                 [=]\{ {\cf17 using namespace }Catch::Generators; {\cf19 return} makeGenerators( __VA_ARGS__ ); \} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7628 {\cf21 #define GENERATE_COPY( ... ) \\}\par
7629 {\cf21     Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\}\par
7630 {\cf21                                  CATCH_INTERNAL_LINEINFO, \\}\par
7631 {\cf21                                  [=]\{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); \} ) }{\cf20 //NOLINT(google-build-using-namespace)}\par
}
}
{\xe \v GENERATE_REF\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:GENERATE_REF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GENERATE_REF( ...)}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\\par
                                 CATCH_INTERNAL_LINEINFO, \\\par
                                 [&]\{ {\cf17 using namespace }Catch::Generators; {\cf19 return} makeGenerators( __VA_ARGS__ ); \} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7632 {\cf21 #define GENERATE_REF( ... ) \\}\par
7633 {\cf21     Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\}\par
7634 {\cf21                                  CATCH_INTERNAL_LINEINFO, \\}\par
7635 {\cf21                                  [&]\{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); \} ) }{\cf20 //NOLINT(google-build-using-namespace)}\par
}
}
{\xe \v GIVEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GIVEN( desc)}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( {\cf22 "    Given: "} << desc )\par
}
}
{\xe \v INFO\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INFO( msg)}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_INFO( {\cf22 "INFO"}, msg )\par
}
}
{\xe \v INTERNAL_CATCH_BENCHMARK\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_BENCHMARK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_BENCHMARK( BenchmarkName,  name,  benchmarkIndex)}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}( Catch::Benchmark::Benchmark BenchmarkName\{name\} ) \\\par
        BenchmarkName = [&]({\cf18 int} benchmarkIndex)\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2182 {\cf21 #define INTERNAL_CATCH_BENCHMARK(BenchmarkName, name, benchmarkIndex)\\}\par
2183 {\cf21     if( Catch::Benchmark::Benchmark BenchmarkName\{name\} ) \\}\par
2184 {\cf21         BenchmarkName = [&](int benchmarkIndex)}\par
}
}
{\xe \v INTERNAL_CATCH_BENCHMARK_ADVANCED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_BENCHMARK_ADVANCED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_BENCHMARK_ADVANCED( BenchmarkName,  name)}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}( Catch::Benchmark::Benchmark BenchmarkName\{name\} ) \\\par
        BenchmarkName = [&]\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2186 {\cf21 #define INTERNAL_CATCH_BENCHMARK_ADVANCED(BenchmarkName, name)\\}\par
2187 {\cf21     if( Catch::Benchmark::Benchmark BenchmarkName\{name\} ) \\}\par
2188 {\cf21         BenchmarkName = [&]}\par
}
}
{\xe \v INTERNAL_CATCH_CAPTURE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_CAPTURE( varName,  macroName,  ...)}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     Catch::Capturer varName( macroName##_catch_sr,        \\\par
                             CATCH_INTERNAL_LINEINFO,     \\\par
                             Catch::ResultWas::Info,      \\\par
                             #__VA_ARGS__##_catch_sr );   \\\par
    varName.captureValues( 0, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4036 {\cf21 #define INTERNAL_CATCH_CAPTURE( varName, macroName, ... ) \\}\par
4037 {\cf21     Catch::Capturer varName( macroName##_catch_sr,        \\}\par
4038 {\cf21                              CATCH_INTERNAL_LINEINFO,     \\}\par
4039 {\cf21                              Catch::ResultWas::Info,      \\}\par
4040 {\cf21                              #__VA_ARGS__##_catch_sr );   \\}\par
4041 {\cf21     varName.captureValues( 0, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_CATCH\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_CATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_CATCH( capturer)}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST( TestName,  ...)}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL( {\cf22 "dummy"}, __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST1, INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName, __VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST0( TestName)}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST1( TestName,  signature)}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf17 static} {\cf18 void} TestName()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6491 {\cf21 #define INTERNAL_CATCH_DECLARE_SIG_TEST1(TestName, signature)\\}\par
6492 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6493 {\cf21     static void TestName()}\par
}
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD( TestName,  ClassName,  ...)}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL( {\cf22 "dummy"}, __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName, ClassName, __VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0( TestName,  ClassName)}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1( TestName,  ClassName,  signature)}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<{\cf17 typename} TestType> \\\par
    {\cf17 struct }TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)<TestType> \{ \\\par
        {\cf18 void} test();\\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6535 {\cf21 #define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1(TestName, ClassName, signature)\\}\par
6536 {\cf21     template<typename TestType> \\}\par
6537 {\cf21     struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)<TestType> \{ \\}\par
6538 {\cf21         void test();\\}\par
6539 {\cf21     \}}\par
}
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X( TestName,  ClassName,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> \\\par
    {\cf17 struct }TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)<__VA_ARGS__> \{ \\\par
        {\cf18 void} test();\\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6541 {\cf21 #define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X(TestName, ClassName, signature, ...)\\}\par
6542 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)> \\}\par
6543 {\cf21     struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)<__VA_ARGS__> \{ \\}\par
6544 {\cf21         void test();\\}\par
6545 {\cf21     \}}\par
}
}
{\xe \v INTERNAL_CATCH_DECLARE_SIG_TEST_X\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DECLARE_SIG_TEST_X}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DECLARE_SIG_TEST_X( TestName,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf17 static} {\cf18 void} TestName()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6494 {\cf21 #define INTERNAL_CATCH_DECLARE_SIG_TEST_X(TestName, signature, ...)\\}\par
6495 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6496 {\cf21     static void TestName()}\par
}
}
{\xe \v INTERNAL_CATCH_DEF\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEF( ...)}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DEF __VA_ARGS__\par
}
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST( TestName,  ...)}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL( {\cf22 "dummy"}, __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1, INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName, __VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST0( TestName)}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST1( TestName,  signature)}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf17 static} {\cf18 void} TestName()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6499 {\cf21 #define INTERNAL_CATCH_DEFINE_SIG_TEST1(TestName, signature)\\}\par
6500 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6501 {\cf21     static void TestName()}\par
}
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD( TestName,  ...)}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL( {\cf22 "dummy"}, __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName, __VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0( TestName)}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1( TestName,  signature)}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<{\cf17 typename} TestType> \\\par
    {\cf18 void} INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName<TestType>::test()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6548 {\cf21 #define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1(TestName, signature)\\}\par
6549 {\cf21     template<typename TestType> \\}\par
6550 {\cf21     void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName<TestType>::test()}\par
}
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X( TestName,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> \\\par
    {\cf18 void} INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName<__VA_ARGS__>::test()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6551 {\cf21 #define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X(TestName, signature, ...)\\}\par
6552 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)> \\}\par
6553 {\cf21     void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName<__VA_ARGS__>::test()}\par
}
}
{\xe \v INTERNAL_CATCH_DEFINE_SIG_TEST_X\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DEFINE_SIG_TEST_X}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DEFINE_SIG_TEST_X( TestName,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf17 static} {\cf18 void} TestName()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6502 {\cf21 #define INTERNAL_CATCH_DEFINE_SIG_TEST_X(TestName, signature,...)\\}\par
6503 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6504 {\cf21     static void TestName()}\par
}
}
{\xe \v INTERNAL_CATCH_DYNAMIC_SECTION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_DYNAMIC_SECTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_DYNAMIC_SECTION( ...)}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                     \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS              \\\par
        if ( Catch::Section {\cf17 const}& INTERNAL_CATCH_UNIQUE_NAME(        \\\par
                 catch_internal_Section ) =                           \\\par
                 Catch::SectionInfo(                                  \\\par
                     CATCH_INTERNAL_LINEINFO,                         \\\par
                     ( Catch::ReusableStringStream() << __VA_ARGS__ ) \\\par
                         .str() ) )                                   \\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5888 {\cf21 #    define INTERNAL_CATCH_DYNAMIC_SECTION( ... )                     \\}\par
5889 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                     \\}\par
5890 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS              \\}\par
5891 {\cf21         if ( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME(        \\}\par
5892 {\cf21                  catch_internal_Section ) =                           \\}\par
5893 {\cf21                  Catch::SectionInfo(                                  \\}\par
5894 {\cf21                      CATCH_INTERNAL_LINEINFO,                         \\}\par
5895 {\cf21                      ( Catch::ReusableStringStream() << __VA_ARGS__ ) \\}\par
5896 {\cf21                          .str() ) )                                   \\}\par
5897 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}\par
}
}
{\xe \v INTERNAL_CATCH_ELSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_ELSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_ELSE( macroName,  resultDisposition,  ...)}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \\\par
    if( !Catch::getResultCapture().lastAssertionPassed() )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5707 {\cf21 #define INTERNAL_CATCH_ELSE( macroName, resultDisposition, ... ) \\}\par
5708 {\cf21     INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \\}\par
5709 {\cf21     if( !Catch::getResultCapture().lastAssertionPassed() )}\par
}
}
{\xe \v INTERNAL_CATCH_EXPAND1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_EXPAND1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_EXPAND1( param)}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_EXPAND2( param )\par
}
}
{\xe \v INTERNAL_CATCH_EXPAND2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_EXPAND2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_EXPAND2( ...)}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_NO##__VA_ARGS__\par
}
}
{\xe \v INTERNAL_CATCH_GET_1_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_GET_1_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_GET_1_ARG( arg1,  arg2,  ...)}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid arg1\par
}
}
{\xe \v INTERNAL_CATCH_GET_2_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_GET_2_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_GET_2_ARG( arg1,  arg2,  ...)}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid arg2\par
}
}
{\xe \v INTERNAL_CATCH_IF\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_IF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_IF( macroName,  resultDisposition,  ...)}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \\\par
    if( Catch::getResultCapture().lastAssertionPassed() )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5702 {\cf21 #define INTERNAL_CATCH_IF( macroName, resultDisposition, ... ) \\}\par
5703 {\cf21     INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \\}\par
5704 {\cf21     if( Catch::getResultCapture().lastAssertionPassed() )}\par
}
}
{\xe \v INTERNAL_CATCH_INFO\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_INFO( macroName,  log)}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 const} Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4044 {\cf21 #define INTERNAL_CATCH_INFO( macroName, log ) \\}\par
4045 {\cf21     const Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )}\par
}
}
{\xe \v INTERNAL_CATCH_MAKE_NAMESPACE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_MAKE_NAMESPACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_MAKE_NAMESPACE( name)}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MAKE_NAMESPACE2(name)\par
}
}
{\xe \v INTERNAL_CATCH_MAKE_NAMESPACE2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_MAKE_NAMESPACE2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_MAKE_NAMESPACE2( ...)}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ns_##__VA_ARGS__\par
}
}
{\xe \v INTERNAL_CATCH_MAKE_TYPE_LIST\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_MAKE_TYPE_LIST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_MAKE_TYPE_LIST( ...)}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__))\par
}
}
{\xe \v INTERNAL_CATCH_MAKE_TYPE_LIST2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_MAKE_TYPE_LIST2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_MAKE_TYPE_LIST2( ...)}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 decltype}(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)>())\par
}
}
{\xe \v INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES( ...)}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6425 {\cf21 #define INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(...)\\}\par
6426 {\cf21     CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)}\par
}
}
{\xe \v INTERNAL_CATCH_METHOD_AS_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_METHOD_AS_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod,  ...)}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        namespace \{                                                           \\\par
        {\cf17 const} Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\\par
            Catch::makeTestInvoker( &QualifiedMethod ),                   \\\par
            CATCH_INTERNAL_LINEINFO,                                      \\\par
            {\cf22 "&"} #QualifiedMethod##_catch_sr,                              \\\par
            Catch::NameAndTags\{ __VA_ARGS__ \} );                          \\\par
    \} {\cf20 /* NOLINT */} \\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6106 {\cf21     #define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, ... ) \\}\par
6107 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6108 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6109 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6110 {\cf21         namespace \{                                                           \\}\par
6111 {\cf21         const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\}\par
6112 {\cf21             Catch::makeTestInvoker( &QualifiedMethod ),                   \\}\par
6113 {\cf21             CATCH_INTERNAL_LINEINFO,                                      \\}\par
6114 {\cf21             "&" #QualifiedMethod##_catch_sr,                              \\}\par
6115 {\cf21             Catch::NameAndTags\{ __VA_ARGS__ \} );                          \\}\par
6116 {\cf21     \} }{\cf20 /* NOLINT */}{\cf21  \\}\par
6117 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}\par
}
}
{\xe \v INTERNAL_CATCH_MSG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_MSG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_MSG( macroName,  messageType,  resultDisposition,  ...)}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{ \\\par
        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::StringRef(), resultDisposition ); \\\par
        catchAssertionHandler.handleMessage( messageType, ( Catch::MessageStream() << __VA_ARGS__ + ::Catch::StreamEndStop() ).m_stream.str() ); \\\par
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \\\par
    \} {\cf19 while}( {\cf17 false} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4028 {\cf21 #define INTERNAL_CATCH_MSG( macroName, messageType, resultDisposition, ... ) \\}\par
4029 {\cf21     do \{ \\}\par
4030 {\cf21         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::StringRef(), resultDisposition ); \\}\par
4031 {\cf21         catchAssertionHandler.handleMessage( messageType, ( Catch::MessageStream() << __VA_ARGS__ + ::Catch::StreamEndStop() ).m_stream.str() ); \\}\par
4032 {\cf21         INTERNAL_CATCH_REACT( catchAssertionHandler ) \\}\par
4033 {\cf21     \} while( false )}\par
}
}
{\xe \v INTERNAL_CATCH_NO_THROW\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NO_THROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NO_THROW( macroName,  resultDisposition,  ...)}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{ \\\par
        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \\\par
        {\cf19 try} \{ \\\par
            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
            CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\\par
            static_cast<void>(__VA_ARGS__); \\\par
            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
            catchAssertionHandler.handleExceptionNotThrownAsExpected(); \\\par
        \} \\\par
        catch( ... ) \{ \\\par
            catchAssertionHandler.handleUnexpectedInflightException(); \\\par
        \} \\\par
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \\\par
    \} {\cf19 while}( {\cf17 false} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5712 {\cf21 #define INTERNAL_CATCH_NO_THROW( macroName, resultDisposition, ... ) \\}\par
5713 {\cf21     do \{ \\}\par
5714 {\cf21         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \\}\par
5715 {\cf21         try \{ \\}\par
5716 {\cf21             CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
5717 {\cf21             CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\}\par
5718 {\cf21             static_cast<void>(__VA_ARGS__); \\}\par
5719 {\cf21             CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
5720 {\cf21             catchAssertionHandler.handleExceptionNotThrownAsExpected(); \\}\par
5721 {\cf21         \} \\}\par
5722 {\cf21         catch( ... ) \{ \\}\par
5723 {\cf21             catchAssertionHandler.handleUnexpectedInflightException(); \\}\par
5724 {\cf21         \} \\}\par
5725 {\cf21         INTERNAL_CATCH_REACT( catchAssertionHandler ) \\}\par
5726 {\cf21     \} while( false )}\par
}
}
{\xe \v INTERNAL_CATCH_NOINTERNAL_CATCH_DEF\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NOINTERNAL_CATCH_DEF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NOINTERNAL_CATCH_DEF}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_NTTP_0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_0}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_NTTP_1\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_1( signature,  ...)}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 struct }Nttp\{\};\\\par
    {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf17 constexpr} {\cf17 auto} get_wrapper() noexcept -> Nttp<__VA_ARGS__> \{ {\cf19 return} \{\}; \} \\\par
    {\cf17 template}<{\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class}...> {\cf17 struct }NttpTemplateTypeList\{\};\\\par
    {\cf17 template}<{\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class}...Cs>\\\par
    {\cf17 constexpr} {\cf17 auto} get_wrapper() noexcept -> NttpTemplateTypeList<Cs...> \{ {\cf19 return} \{\}; \} \\\par
    \\\par
    {\cf17 template}< {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class }Container, {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class }List, INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf17 struct }rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>> \{ {\cf17 using }type = TypeList<Container<__VA_ARGS__>>; \};\\\par
    {\cf17 template}< {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class }Container, {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class }List, INTERNAL_CATCH_REMOVE_PARENS(signature), {\cf17 typename}...Elements>\\\par
    {\cf17 struct }rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>, Elements...> \{ {\cf17 using }type = {\cf17 typename} append<TypeList<Container<__VA_ARGS__>>, {\cf17 typename} rewrap<NttpTemplateTypeList<Container>, Elements...>::type>::type; \};\\\par
    {\cf17 template}<{\cf17 template} <{\cf17 typename}...> {\cf17 class }Final, {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)> {\cf17 class}...Containers, {\cf17 typename}...Types>\\\par
    {\cf17 struct }create<Final, NttpTemplateTypeList<Containers...>, TypeList<Types...>> \{ {\cf17 using }type = {\cf17 typename} append<Final<>, {\cf17 typename} rewrap<NttpTemplateTypeList<Containers>, Types...>::type...>::type; \};\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6475 {\cf21 #define INTERNAL_CATCH_NTTP_1(signature, ...)\\}\par
6476 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)> struct Nttp\{\};\\}\par
6477 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6478 {\cf21     constexpr auto get_wrapper() noexcept -> Nttp<__VA_ARGS__> \{ return \{\}; \} \\}\par
6479 {\cf21     template<template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...> struct NttpTemplateTypeList\{\};\\}\par
6480 {\cf21     template<template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...Cs>\\}\par
6481 {\cf21     constexpr auto get_wrapper() noexcept -> NttpTemplateTypeList<Cs...> \{ return \{\}; \} \\}\par
6482 {\cf21     \\}\par
6483 {\cf21     template< template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class Container, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class List, INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6484 {\cf21     struct rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>> \{ using type = TypeList<Container<__VA_ARGS__>>; \};\\}\par
6485 {\cf21     template< template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class Container, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class List, INTERNAL_CATCH_REMOVE_PARENS(signature), typename...Elements>\\}\par
6486 {\cf21     struct rewrap<NttpTemplateTypeList<Container>, List<__VA_ARGS__>, Elements...> \{ using type = typename append<TypeList<Container<__VA_ARGS__>>, typename rewrap<NttpTemplateTypeList<Container>, Elements...>::type>::type; \};\\}\par
6487 {\cf21     template<template <typename...> class Final, template<INTERNAL_CATCH_REMOVE_PARENS(signature)> class...Containers, typename...Types>\\}\par
6488 {\cf21     struct create<Final, NttpTemplateTypeList<Containers...>, TypeList<Types...>> \{ using type = typename append<Final<>, typename rewrap<NttpTemplateTypeList<Containers>, Types...>::type...>::type; \};}\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_GEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_GEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_GEN( ...)}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__),INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_0)\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_REG_GEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_REG_GEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_REG_GEN( TestFunc,  ...)}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL( {\cf22 "dummy"}, __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER0, INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc, __VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_REG_METHOD_GEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_REG_METHOD_GEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_REG_METHOD_GEN( TestName,  ...)}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL( {\cf22 "dummy"}, __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD0, INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName, __VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_REGISTER\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_REGISTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_REGISTER( TestFunc,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf18 void} reg_test(Nttp<__VA_ARGS__>, Catch::NameAndTags nameAndTags)\\\par
    \{\\\par
        Catch::AutoReg( Catch::makeTestInvoker(&TestFunc<__VA_ARGS__>), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6513 {\cf21 #define INTERNAL_CATCH_NTTP_REGISTER(TestFunc, signature, ...)\\}\par
6514 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6515 {\cf21     void reg_test(Nttp<__VA_ARGS__>, Catch::NameAndTags nameAndTags)\\}\par
6516 {\cf21     \{\\}\par
6517 {\cf21         Catch::AutoReg( Catch::makeTestInvoker(&TestFunc<__VA_ARGS__>), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\\}\par
6518 {\cf21     \}}\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_REGISTER0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_REGISTER0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_REGISTER0( TestFunc,  signature)}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<{\cf17 typename} Type>\\\par
    {\cf18 void} reg_test(TypeList<Type>, Catch::NameAndTags nameAndTags)\\\par
    \{\\\par
        Catch::AutoReg( Catch::makeTestInvoker(&TestFunc<Type>), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6506 {\cf21 #define INTERNAL_CATCH_NTTP_REGISTER0(TestFunc, signature)\\}\par
6507 {\cf21     template<typename Type>\\}\par
6508 {\cf21     void reg_test(TypeList<Type>, Catch::NameAndTags nameAndTags)\\}\par
6509 {\cf21     \{\\}\par
6510 {\cf21         Catch::AutoReg( Catch::makeTestInvoker(&TestFunc<Type>), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\\}\par
6511 {\cf21     \}}\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_REGISTER_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_REGISTER_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_REGISTER_METHOD( TestName,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\\par
    {\cf18 void} reg_test(Nttp<__VA_ARGS__>, Catch::StringRef className, Catch::NameAndTags nameAndTags)\\\par
    \{\\\par
        Catch::AutoReg( Catch::makeTestInvoker(&TestName<__VA_ARGS__>::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6527 {\cf21 #define INTERNAL_CATCH_NTTP_REGISTER_METHOD(TestName, signature, ...)\\}\par
6528 {\cf21     template<INTERNAL_CATCH_REMOVE_PARENS(signature)>\\}\par
6529 {\cf21     void reg_test(Nttp<__VA_ARGS__>, Catch::StringRef className, Catch::NameAndTags nameAndTags)\\}\par
6530 {\cf21     \{\\}\par
6531 {\cf21         Catch::AutoReg( Catch::makeTestInvoker(&TestName<__VA_ARGS__>::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\\}\par
6532 {\cf21     \}}\par
}
}
{\xe \v INTERNAL_CATCH_NTTP_REGISTER_METHOD0\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_NTTP_REGISTER_METHOD0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_NTTP_REGISTER_METHOD0( TestName,  signature,  ...)}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template}<{\cf17 typename} Type>\\\par
    {\cf18 void} reg_test(TypeList<Type>, Catch::StringRef className, Catch::NameAndTags nameAndTags)\\\par
    \{\\\par
        Catch::AutoReg( Catch::makeTestInvoker(&TestName<Type>::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\\\par
    \}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6520 {\cf21 #define INTERNAL_CATCH_NTTP_REGISTER_METHOD0(TestName, signature, ...)\\}\par
6521 {\cf21     template<typename Type>\\}\par
6522 {\cf21     void reg_test(TypeList<Type>, Catch::StringRef className, Catch::NameAndTags nameAndTags)\\}\par
6523 {\cf21     \{\\}\par
6524 {\cf21         Catch::AutoReg( Catch::makeTestInvoker(&TestName<Type>::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\\}\par
6525 {\cf21     \}}\par
}
}
{\xe \v INTERNAL_CATCH_REACT\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REACT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REACT( handler)}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid handler.complete();\par
}
}
{\xe \v INTERNAL_CATCH_REGISTER_ENUM\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REGISTER_ENUM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REGISTER_ENUM( enumName,  ...)}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 namespace }Catch \{ \\\par
    {\cf17 template}<> {\cf17 struct }StringMaker<enumName> \{ \\\par
        {\cf17 static} std::string convert( enumName value ) \{ \\\par
            {\cf17 static} {\cf17 const} {\cf17 auto}& enumInfo = ::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum( #enumName, #__VA_ARGS__, \{ __VA_ARGS__ \} ); \\\par
            {\cf19 return} {\cf17 static_cast<}std::string{\cf17 >}(enumInfo.lookup( {\cf17 static_cast<}{\cf18 int}{\cf17 >}( value ) )); \\\par
        \} \\\par
    \}; \\\par
\}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3077 {\cf21 #define INTERNAL_CATCH_REGISTER_ENUM( enumName, ... ) \\}\par
3078 {\cf21 namespace Catch \{ \\}\par
3079 {\cf21     template<> struct StringMaker<enumName> \{ \\}\par
3080 {\cf21         static std::string convert( enumName value ) \{ \\}\par
3081 {\cf21             static const auto& enumInfo = ::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum( #enumName, #__VA_ARGS__, \{ __VA_ARGS__ \} ); \\}\par
3082 {\cf21             return static_cast<std::string>(enumInfo.lookup( static_cast<int>( value ) )); \\}\par
3083 {\cf21         \} \\}\par
3084 {\cf21     \}; \\}\par
3085 {\cf21 \}}\par
}
}
{\xe \v INTERNAL_CATCH_REGISTER_TESTCASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REGISTER_TESTCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REGISTER_TESTCASE( Function,  ...)}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf19 do} \{ \\\par
            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
            CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
            CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
            Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ __VA_ARGS__ \} ); {\cf20 /* NOLINT */} \\\par
            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
        \} {\cf19 while}({\cf17 false})\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6121 {\cf21     #define INTERNAL_CATCH_REGISTER_TESTCASE( Function, ... ) \\}\par
6122 {\cf21         do \{ \\}\par
6123 {\cf21             CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6124 {\cf21             CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6125 {\cf21             CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6126 {\cf21             Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ __VA_ARGS__ \} ); }{\cf20 /* NOLINT */}{\cf21  \\}\par
6127 {\cf21             CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6128 {\cf21         \} while(false)}\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS( ...)}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     INTERNAL_CATCH_EXPAND1( INTERNAL_CATCH_DEF __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5973 {\cf21 #define INTERNAL_CATCH_REMOVE_PARENS( ... ) \\}\par
5974 {\cf21     INTERNAL_CATCH_EXPAND1( INTERNAL_CATCH_DEF __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_10_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_10_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_10_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9)}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_11_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_11_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_11_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10)}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_1_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_1_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_1_ARG( _0)}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_2_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_2_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_2_ARG( _0,  _1)}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_1)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_3_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_3_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_3_ARG( _0,  _1,  _2)}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_1, _2)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_4_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_4_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_4_ARG( _0,  _1,  _2,  _3)}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_1, _2, _3)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_5_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_5_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_5_ARG( _0,  _1,  _2,  _3,  _4)}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_1, _2, _3, _4)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_6_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_6_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_6_ARG( _0,  _1,  _2,  _3,  _4,  _5)}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_1, _2, _3, _4, _5)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_7_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_7_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_7_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6)}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_1, _2, _3, _4, _5, _6)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_8_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_8_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_8_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7)}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_1, _2, _3, _4, _5, _6, _7)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_9_ARG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_9_ARG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_9_ARG( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8)}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_1, _2, _3, _4, _5, _6, _7, _8)\par
}
}
{\xe \v INTERNAL_CATCH_REMOVE_PARENS_GEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_REMOVE_PARENS_GEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_REMOVE_PARENS_GEN( ...)}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_SECTION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_SECTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_SECTION( ...)}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                         \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                  \\\par
        if ( Catch::Section {\cf17 const}& INTERNAL_CATCH_UNIQUE_NAME(            \\\par
                 catch_internal_Section ) =                               \\\par
                 Catch::Section( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) ) \\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5880 {\cf21 #    define INTERNAL_CATCH_SECTION( ... )                                 \\}\par
5881 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                         \\}\par
5882 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                  \\}\par
5883 {\cf21         if ( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME(            \\}\par
5884 {\cf21                  catch_internal_Section ) =                               \\}\par
5885 {\cf21                  Catch::Section( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) ) \\}\par
5886 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION}\par
}
}
{\xe \v INTERNAL_CATCH_STRINGIZE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_STRINGIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_STRINGIZE( ...)}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_STRINGIZE2(__VA_ARGS__)\par
}
}
{\xe \v INTERNAL_CATCH_STRINGIZE2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_STRINGIZE2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_STRINGIZE2( ...)}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #__VA_ARGS__}\par
}
}
{\xe \v INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS( param)}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE( Name,  Tags,  TmplList)}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, TmplList )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6760 {\cf21     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(Name, Tags, TmplList) \\}\par
6761 {\cf21         INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, TmplList )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( TestName,  TestFunc,  Name,  Tags,  TmplList)}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\\par
        template<typename TestType> {\cf17 static} {\cf18 void} TestFunc();       \\\par
        {\cf17 namespace }\{\\\par
        {\cf17 namespace }INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{\\\par
        INTERNAL_CATCH_TYPE_GEN\\\par
        template<{\cf17 typename}... Types>                               \\\par
        {\cf17 struct }TestName \{                                         \\\par
            {\cf18 void} reg_tests() \{                                          \\\par
                {\cf18 size_t} index = 0;                                    \\\par
                {\cf17 using }expander = {\cf18 size_t}[];                           \\\par
                (void)expander\{(Catch::AutoReg( Catch::makeTestInvoker( &TestFunc<Types> ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ Name {\cf22 " - "} INTERNAL_CATCH_STRINGIZE(TmplList) {\cf22 " - "} + std::to_string(index), Tags \} ), index++)... \};{\cf20 /* NOLINT */}\\\par
            \}                                                     \\\par
        \};\\\par
        {\cf17 static} {\cf18 int} INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{ \\\par
                {\cf17 using }TestInit = {\cf17 typename} convert<TestName, TmplList>::type; \\\par
                TestInit t;                                           \\\par
                t.reg_tests();                                        \\\par
                {\cf19 return} 0;                                             \\\par
            \}();                                                      \\\par
        \}\}\\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \\\par
        template<typename TestType>                                   \\\par
        {\cf17 static} {\cf18 void} TestFunc()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6731 {\cf21     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName, TestFunc, Name, Tags, TmplList)\\}\par
6732 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6733 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6734 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\}\par
6735 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6736 {\cf21         CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\}\par
6737 {\cf21         template<typename TestType> static void TestFunc();       \\}\par
6738 {\cf21         namespace \{\\}\par
6739 {\cf21         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{\\}\par
6740 {\cf21         INTERNAL_CATCH_TYPE_GEN\\}\par
6741 {\cf21         template<typename... Types>                               \\}\par
6742 {\cf21         struct TestName \{                                         \\}\par
6743 {\cf21             void reg_tests() \{                                          \\}\par
6744 {\cf21                 size_t index = 0;                                    \\}\par
6745 {\cf21                 using expander = size_t[];                           \\}\par
6746 {\cf21                 (void)expander\{(Catch::AutoReg( Catch::makeTestInvoker( &TestFunc<Types> ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ Name " - " INTERNAL_CATCH_STRINGIZE(TmplList) " - " + std::to_string(index), Tags \} ), index++)... \};}{\cf20 /* NOLINT */}{\cf21 \\}\par
6747 {\cf21             \}                                                     \\}\par
6748 {\cf21         \};\\}\par
6749 {\cf21         static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{ \\}\par
6750 {\cf21                 using TestInit = typename convert<TestName, TmplList>::type; \\}\par
6751 {\cf21                 TestInit t;                                           \\}\par
6752 {\cf21                 t.reg_tests();                                        \\}\par
6753 {\cf21                 return 0;                                             \\}\par
6754 {\cf21             \}();                                                      \\}\par
6755 {\cf21         \}\}\\}\par
6756 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \\}\par
6757 {\cf21         template<typename TestType>                                   \\}\par
6758 {\cf21         static void TestFunc()}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( ClassName,  Name,  Tags,  TmplList)}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, TmplList )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6895 {\cf21 #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(ClassName, Name, Tags, TmplList) \\}\par
6896 {\cf21         INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, TmplList )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass,  TestName,  ClassName,  Name,  Tags,  TmplList)}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\\par
        template<typename TestType> \\\par
        {\cf17 struct }TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) \{ \\\par
            {\cf18 void} test();\\\par
        \};\\\par
        {\cf17 namespace }\{\\\par
        {\cf17 namespace }INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{ \\\par
            INTERNAL_CATCH_TYPE_GEN\\\par
            template<{\cf17 typename}...Types>\\\par
            {\cf17 struct }TestNameClass\{\\\par
                {\cf18 void} reg_tests()\{\\\par
                    {\cf18 size_t} index = 0;\\\par
                    {\cf17 using }expander = {\cf18 size_t}[];\\\par
                    (void)expander\{(Catch::AutoReg( Catch::makeTestInvoker( &TestName<Types>::test ), CATCH_INTERNAL_LINEINFO, #ClassName##_catch_sr, Catch::NameAndTags\{ Name {\cf22 " - "} INTERNAL_CATCH_STRINGIZE(TmplList) {\cf22 " - "} + std::to_string(index), Tags \} ), index++)... \};{\cf20 /* NOLINT */} \\\par
                \}\\\par
            \};\\\par
            {\cf17 static} {\cf18 int} INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\\par
                {\cf17 using }TestInit = {\cf17 typename} convert<TestNameClass, TmplList>::type;\\\par
                TestInit t;\\\par
                t.reg_tests();\\\par
                {\cf19 return} 0;\\\par
            \}(); \\\par
        \}\}\\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
        template<typename TestType> \\\par
        {\cf18 void} TestName<TestType>::test()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6863 {\cf21     #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, TmplList) \\}\par
6864 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6865 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6866 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\}\par
6867 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6868 {\cf21         CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\}\par
6869 {\cf21         template<typename TestType> \\}\par
6870 {\cf21         struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) \{ \\}\par
6871 {\cf21             void test();\\}\par
6872 {\cf21         \};\\}\par
6873 {\cf21         namespace \{\\}\par
6874 {\cf21         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{ \\}\par
6875 {\cf21             INTERNAL_CATCH_TYPE_GEN\\}\par
6876 {\cf21             template<typename...Types>\\}\par
6877 {\cf21             struct TestNameClass\{\\}\par
6878 {\cf21                 void reg_tests()\{\\}\par
6879 {\cf21                     size_t index = 0;\\}\par
6880 {\cf21                     using expander = size_t[];\\}\par
6881 {\cf21                     (void)expander\{(Catch::AutoReg( Catch::makeTestInvoker( &TestName<Types>::test ), CATCH_INTERNAL_LINEINFO, #ClassName##_catch_sr, Catch::NameAndTags\{ Name " - " INTERNAL_CATCH_STRINGIZE(TmplList) " - " + std::to_string(index), Tags \} ), index++)... \};}{\cf20 /* NOLINT */}{\cf21  \\}\par
6882 {\cf21                 \}\\}\par
6883 {\cf21             \};\\}\par
6884 {\cf21             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\}\par
6885 {\cf21                 using TestInit = typename convert<TestNameClass, TmplList>::type;\\}\par
6886 {\cf21                 TestInit t;\\}\par
6887 {\cf21                 t.reg_tests();\\}\par
6888 {\cf21                 return 0;\\}\par
6889 {\cf21             \}(); \\}\par
6890 {\cf21         \}\}\\}\par
6891 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6892 {\cf21         template<typename TestType> \\}\par
6893 {\cf21         void TestName<TestType>::test()}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( Name,  Tags,  ...)}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, {\cf17 typename} T,__VA_ARGS__)\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6716 {\cf21     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name, Tags, ...)\\}\par
6717 {\cf21         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename T,__VA_ARGS__)}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2( TestName,  TestFuncName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6680 {\cf21     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName, TestFuncName, Name, Tags, Signature, TmplTypes, TypesList) \\}\par
6681 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                      \\}\par
6682 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                      \\}\par
6683 {\cf21         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS                \\}\par
6684 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS       \\}\par
6685 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6686 {\cf21         CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\}\par
6687 {\cf21         template<typename TestType> static void TestFuncName();       \\}\par
6688 {\cf21         namespace \{\\}\par
6689 {\cf21         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) \{                                     \\}\par
6690 {\cf21             INTERNAL_CATCH_TYPE_GEN                                                  \\}\par
6691 {\cf21             INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))         \\}\par
6692 {\cf21             template<typename... Types>                               \\}\par
6693 {\cf21             struct TestName \{                                         \\}\par
6694 {\cf21                 void reg_tests() \{                                          \\}\par
6695 {\cf21                     size_t index = 0;                                    \\}\par
6696 {\cf21                     using expander = size_t[];                           \\}\par
6697 {\cf21                     constexpr char const* tmpl_types[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))\};\\}\par
6698 {\cf21                     constexpr char const* types_list[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TypesList))\};\\}\par
6699 {\cf21                     constexpr auto num_types = sizeof(types_list) / sizeof(types_list[0]);\\}\par
6700 {\cf21                     (void)expander\{(Catch::AutoReg( Catch::makeTestInvoker( &TestFuncName<Types> ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ Name " - " + std::string(tmpl_types[index / num_types]) + '<' + std::string(types_list[index % num_types]) + '>', Tags \} ), index++)... \};}{\cf20 /* NOLINT */}{\cf21 \\}\par
6701 {\cf21                 \}                                                     \\}\par
6702 {\cf21             \};                                                        \\}\par
6703 {\cf21             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{ \\}\par
6704 {\cf21                 using TestInit = typename create<TestName, decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>()), TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>>::type; \\}\par
6705 {\cf21                 TestInit t;                                           \\}\par
6706 {\cf21                 t.reg_tests();                                        \\}\par
6707 {\cf21                 return 0;                                             \\}\par
6708 {\cf21             \}();                                                      \\}\par
6709 {\cf21         \}                                                             \\}\par
6710 {\cf21         \}                                                             \\}\par
6711 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \\}\par
6712 {\cf21         template<typename TestType>                                   \\}\par
6713 {\cf21         static void TestFuncName()}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName,  Name,  Tags,  ...)}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, {\cf17 typename} T, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6848 {\cf21     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName, Name, Tags, ... )\\}\par
6849 {\cf21         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, typename T, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature,  TmplTypes,  TypesList)}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6810 {\cf21     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass, TestName, ClassName, Name, Tags, Signature, TmplTypes, TypesList)\\}\par
6811 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6812 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6813 {\cf21         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\}\par
6814 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\}\par
6815 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6816 {\cf21         template<typename TestType> \\}\par
6817 {\cf21             struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName <TestType>) \{ \\}\par
6818 {\cf21                 void test();\\}\par
6819 {\cf21             \};\\}\par
6820 {\cf21         namespace \{\\}\par
6821 {\cf21         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestNameClass) \{\\}\par
6822 {\cf21             INTERNAL_CATCH_TYPE_GEN                  \\}\par
6823 {\cf21             INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\}\par
6824 {\cf21             template<typename...Types>\\}\par
6825 {\cf21             struct TestNameClass\{\\}\par
6826 {\cf21                 void reg_tests()\{\\}\par
6827 {\cf21                     std::size_t index = 0;\\}\par
6828 {\cf21                     using expander = std::size_t[];\\}\par
6829 {\cf21                     constexpr char const* tmpl_types[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))\};\\}\par
6830 {\cf21                     constexpr char const* types_list[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TypesList))\};\\}\par
6831 {\cf21                     constexpr auto num_types = sizeof(types_list) / sizeof(types_list[0]);\\}\par
6832 {\cf21                     (void)expander\{(Catch::AutoReg( Catch::makeTestInvoker( &TestName<Types>::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags\{ Name " - " + std::string(tmpl_types[index / num_types]) + '<' + std::string(types_list[index % num_types]) + '>', Tags \} ), index++)... \};}{\cf20 /* NOLINT */}{\cf21  \\}\par
6833 {\cf21                 \}\\}\par
6834 {\cf21             \};\\}\par
6835 {\cf21             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\}\par
6836 {\cf21                 using TestInit = typename create<TestNameClass, decltype(get_wrapper<INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)>()), TypeList<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))>>::type;\\}\par
6837 {\cf21                 TestInit t;\\}\par
6838 {\cf21                 t.reg_tests();\\}\par
6839 {\cf21                 return 0;\\}\par
6840 {\cf21             \}(); \\}\par
6841 {\cf21         \}\\}\par
6842 {\cf21         \}\\}\par
6843 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6844 {\cf21         template<typename TestType> \\}\par
6845 {\cf21         void TestName<TestType>::test()}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName,  Name,  Tags,  Signature,  ...)}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6856 {\cf21     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... )\\}\par
6857 {\cf21         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( Name,  Tags,  Signature,  ...)}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__)\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6724 {\cf21     #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name, Tags, Signature, ...)\\}\par
6725 {\cf21         INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__)}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_TEST_CASE( Name,  Tags,  ...)}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, {\cf17 typename} TestType, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6665 {\cf21     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name, Tags, ...) \\}\par
6666 {\cf21         INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename TestType, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_TEST_CASE_2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_TEST_CASE_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( TestName,  TestFunc,  Name,  Tags,  Signature,  ...)}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\\par
        INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\\par
        {\cf17 namespace }\{\\\par
        {\cf17 namespace }INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{\\\par
            INTERNAL_CATCH_TYPE_GEN\\\par
            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\\par
            INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\\\par
            {\cf17 template}<{\cf17 typename}...Types> \\\par
            {\cf17 struct }TestName\{\\\par
                TestName()\{\\\par
                    {\cf18 size_t} index = 0;                                    \\\par
                    {\cf17 constexpr} {\cf18 char} {\cf17 const}* tmpl_types[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)\}; {\cf20 /* NOLINT(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,hicpp-avoid-c-arrays) */}\\\par
                    {\cf17 using }expander = {\cf18 size_t}[]; {\cf20 /* NOLINT(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,hicpp-avoid-c-arrays) */}\\\par
                    (void)expander\{(reg_test(Types\{\}, Catch::NameAndTags\{ Name {\cf22 " - "} + std::string(tmpl_types[index]), Tags \} ), index++)... \};{\cf20 /* NOLINT */} \\\par
                \}\\\par
            \};\\\par
            {\cf17 static} {\cf17 const} {\cf18 int} INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\\par
            TestName<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)>();\\\par
            {\cf19 return} 0;\\\par
        \}();\\\par
        \}\\\par
        \}\\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
        INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6633 {\cf21     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName, TestFunc, Name, Tags, Signature, ... )\\}\par
6634 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6635 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6636 {\cf21         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\}\par
6637 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\}\par
6638 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6639 {\cf21         CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\}\par
6640 {\cf21         INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\}\par
6641 {\cf21         namespace \{\\}\par
6642 {\cf21         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{\\}\par
6643 {\cf21             INTERNAL_CATCH_TYPE_GEN\\}\par
6644 {\cf21             INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\}\par
6645 {\cf21             INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\\}\par
6646 {\cf21             template<typename...Types> \\}\par
6647 {\cf21             struct TestName\{\\}\par
6648 {\cf21                 TestName()\{\\}\par
6649 {\cf21                     size_t index = 0;                                    \\}\par
6650 {\cf21                     constexpr char const* tmpl_types[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)\}; }{\cf20 /* NOLINT(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,hicpp-avoid-c-arrays) */}{\cf21 \\}\par
6651 {\cf21                     using expander = size_t[]; }{\cf20 /* NOLINT(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,hicpp-avoid-c-arrays) */}{\cf21 \\}\par
6652 {\cf21                     (void)expander\{(reg_test(Types\{\}, Catch::NameAndTags\{ Name " - " + std::string(tmpl_types[index]), Tags \} ), index++)... \};}{\cf20 /* NOLINT */}{\cf21  \\}\par
6653 {\cf21                 \}\\}\par
6654 {\cf21             \};\\}\par
6655 {\cf21             static const int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\}\par
6656 {\cf21             TestName<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)>();\\}\par
6657 {\cf21             return 0;\\}\par
6658 {\cf21         \}();\\}\par
6659 {\cf21         \}\\}\par
6660 {\cf21         \}\\}\par
6661 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6662 {\cf21         INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName,  Name,  Tags,  ...)}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, {\cf17 typename} T, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6795 {\cf21     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName, Name, Tags,... ) \\}\par
6796 {\cf21         INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass,  TestName,  ClassName,  Name,  Tags,  Signature,  ...)}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        namespace \{\\\par
        {\cf17 namespace }INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{ \\\par
            INTERNAL_CATCH_TYPE_GEN\\\par
            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\\par
            INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\\par
            INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))\\\par
            {\cf17 template}<{\cf17 typename}...Types> \\\par
            {\cf17 struct }TestNameClass\{\\\par
                TestNameClass()\{\\\par
                    {\cf18 size_t} index = 0;                                    \\\par
                    {\cf17 constexpr} {\cf18 char} {\cf17 const}* tmpl_types[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)\};\\\par
                    {\cf17 using }expander = {\cf18 size_t}[];\\\par
                    (void)expander\{(reg_test(Types\{\}, #ClassName, Catch::NameAndTags\{ Name {\cf22 " - "} + std::string(tmpl_types[index]), Tags \} ), index++)... \};{\cf20 /* NOLINT */} \\\par
                \}\\\par
            \};\\\par
            {\cf17 static} {\cf18 int} INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\\par
                TestNameClass<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)>();\\\par
                {\cf19 return} 0;\\\par
        \}();\\\par
        \}\\\par
        \}\\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
        INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6764 {\cf21     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... ) \\}\par
6765 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6766 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6767 {\cf21         CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\}\par
6768 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\}\par
6769 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6770 {\cf21         namespace \{\\}\par
6771 {\cf21         namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName)\{ \\}\par
6772 {\cf21             INTERNAL_CATCH_TYPE_GEN\\}\par
6773 {\cf21             INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\}\par
6774 {\cf21             INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\}\par
6775 {\cf21             INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))\\}\par
6776 {\cf21             template<typename...Types> \\}\par
6777 {\cf21             struct TestNameClass\{\\}\par
6778 {\cf21                 TestNameClass()\{\\}\par
6779 {\cf21                     size_t index = 0;                                    \\}\par
6780 {\cf21                     constexpr char const* tmpl_types[] = \{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)\};\\}\par
6781 {\cf21                     using expander = size_t[];\\}\par
6782 {\cf21                     (void)expander\{(reg_test(Types\{\}, #ClassName, Catch::NameAndTags\{ Name " - " + std::string(tmpl_types[index]), Tags \} ), index++)... \};}{\cf20 /* NOLINT */}{\cf21  \\}\par
6783 {\cf21                 \}\\}\par
6784 {\cf21             \};\\}\par
6785 {\cf21             static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = []()\{\\}\par
6786 {\cf21                 TestNameClass<INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)>();\\}\par
6787 {\cf21                 return 0;\\}\par
6788 {\cf21         \}();\\}\par
6789 {\cf21         \}\\}\par
6790 {\cf21         \}\\}\par
6791 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6792 {\cf21         INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName,  Name,  Tags,  Signature,  ...)}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6803 {\cf21     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... ) \\}\par
6804 {\cf21         INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( Name,  Tags,  Signature,  ...)}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6673 {\cf21     #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name, Tags, Signature, ...) \\}\par
6674 {\cf21         INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEST\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEST( macroName,  resultDisposition,  ...)}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{ {\cf20 /* NOLINT(bugprone-infinite-loop) */} \\\par
        {\cf20 /* The expression should not be evaluated, but warnings should hopefully be checked */} \\\par
        CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__); \\\par
        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \\\par
        INTERNAL_CATCH_TRY \{ \\\par
            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
            CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \\\par
            catchAssertionHandler.handleExpr( Catch::Decomposer() <= __VA_ARGS__ ); {\cf20 /* NOLINT(bugprone-chained-comparison) */} \\\par
            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
        \} INTERNAL_CATCH_CATCH( catchAssertionHandler ) \\\par
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \\\par
    \} {\cf19 while}( ({\cf18 void})0, ({\cf17 false}) && {\cf17 static_cast<}{\cf17 const }{\cf18 bool}&{\cf17 >}( !!(__VA_ARGS__) ) )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5686 {\cf21 #define INTERNAL_CATCH_TEST( macroName, resultDisposition, ... ) \\}\par
5687 {\cf21     do \{ }{\cf20 /* NOLINT(bugprone-infinite-loop) */}{\cf21  \\}\par
5688 {\cf21         }{\cf20 /* The expression should not be evaluated, but warnings should hopefully be checked */}{\cf21  \\}\par
5689 {\cf21         CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__); \\}\par
5690 {\cf21         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \\}\par
5691 {\cf21         INTERNAL_CATCH_TRY \{ \\}\par
5692 {\cf21             CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
5693 {\cf21             CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \\}\par
5694 {\cf21             catchAssertionHandler.handleExpr( Catch::Decomposer() <= __VA_ARGS__ ); }{\cf20 /* NOLINT(bugprone-chained-comparison) */}{\cf21  \\}\par
5695 {\cf21             CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
5696 {\cf21         \} INTERNAL_CATCH_CATCH( catchAssertionHandler ) \\}\par
5697 {\cf21         INTERNAL_CATCH_REACT( catchAssertionHandler ) \\}\par
5698 {\cf21     \} while( (void)0, (false) && static_cast<const bool&>( !!(__VA_ARGS__) ) ) }{\cf20 // the expression here is never evaluated at runtime but it forces the compiler to give it a look}\par
}
}
{\xe \v INTERNAL_CATCH_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName,  ...)}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), ClassName, __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6101 {\cf21     #define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, ... ) \\}\par
6102 {\cf21         INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), ClassName, __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TEST_CASE_METHOD2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TEST_CASE_METHOD2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName,  ClassName,  ...)}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        namespace\{ \\\par
            {\cf17 struct }TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) \{ \\\par
                {\cf18 void} test(); \\\par
            \}; \\\par
            {\cf17 const} Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\\par
            Catch::makeTestInvoker( &TestName::test ),                    \\\par
            CATCH_INTERNAL_LINEINFO,                                      \\\par
{\cf21             #ClassName##_catch_sr,                                        \\}\par
{\cf21             Catch::NameAndTags\{ __VA_ARGS__ \} ); }{\cf20 /* NOLINT */}{\cf21  \\}\par
{\cf21         \} \\}\par
{\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
{\cf21         void TestName::test()}\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6085 {\cf21     #define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName, ClassName, ... )\\}\par
6086 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6087 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6088 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6089 {\cf21         namespace\{ \\}\par
6090 {\cf21             struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) \{ \\}\par
6091 {\cf21                 void test(); \\}\par
6092 {\cf21             \}; \\}\par
6093 {\cf21             const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\}\par
6094 {\cf21             Catch::makeTestInvoker( &TestName::test ),                    \\}\par
6095 {\cf21             CATCH_INTERNAL_LINEINFO,                                      \\}\par
6096 {\cf21             #ClassName##_catch_sr,                                        \\}\par
6097 {\cf21             Catch::NameAndTags\{ __VA_ARGS__ \} ); }{\cf20 /* NOLINT */}{\cf21  \\}\par
6098 {\cf21         \} \\}\par
6099 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6100 {\cf21         void TestName::test()}\par
}
}
{\xe \v INTERNAL_CATCH_TESTCASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TESTCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TESTCASE( ...)}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), __VA_ARGS__ )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6046 {\cf21     #define INTERNAL_CATCH_TESTCASE( ... ) \\}\par
6047 {\cf21         INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), __VA_ARGS__ )}\par
}
}
{\xe \v INTERNAL_CATCH_TESTCASE2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TESTCASE2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TESTCASE2( TestName,  ...)}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid         {\cf17 static} {\cf18 void} TestName(); \\\par
        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\\par
        namespace\{ {\cf17 const} Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &TestName ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ __VA_ARGS__ \} ); \} {\cf20 /* NOLINT */} \\\par
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
        static {\cf18 void} TestName()\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6038 {\cf21     #define INTERNAL_CATCH_TESTCASE2( TestName, ... ) \\}\par
6039 {\cf21         static void TestName(); \\}\par
6040 {\cf21         CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
6041 {\cf21         CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
6042 {\cf21         CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\}\par
6043 {\cf21         namespace\{ const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &TestName ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags\{ __VA_ARGS__ \} ); \} }{\cf20 /* NOLINT */}{\cf21  \\}\par
6044 {\cf21         CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
6045 {\cf21         static void TestName()}\par
}
}
{\xe \v INTERNAL_CATCH_THROWS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_THROWS( macroName,  resultDisposition,  ...)}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{ \\\par
        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition); \\\par
        if( catchAssertionHandler.allowThrows() ) \\\par
            {\cf19 try} \{ \\\par
                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
                CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\\par
                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\\par
                static_cast<void>(__VA_ARGS__); \\\par
                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\\par
            \} \\\par
            catch( ... ) \{ \\\par
                catchAssertionHandler.handleExceptionThrownAsExpected(); \\\par
            \} \\\par
        else \\\par
            catchAssertionHandler.handleThrowingCallSkipped(); \\\par
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \\\par
    \} {\cf19 while}( {\cf17 false} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5729 {\cf21 #define INTERNAL_CATCH_THROWS( macroName, resultDisposition, ... ) \\}\par
5730 {\cf21     do \{ \\}\par
5731 {\cf21         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition); \\}\par
5732 {\cf21         if( catchAssertionHandler.allowThrows() ) \\}\par
5733 {\cf21             try \{ \\}\par
5734 {\cf21                 CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
5735 {\cf21                 CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\}\par
5736 {\cf21                 CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\}\par
5737 {\cf21                 static_cast<void>(__VA_ARGS__); \\}\par
5738 {\cf21                 CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
5739 {\cf21                 catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\}\par
5740 {\cf21             \} \\}\par
5741 {\cf21             catch( ... ) \{ \\}\par
5742 {\cf21                 catchAssertionHandler.handleExceptionThrownAsExpected(); \\}\par
5743 {\cf21             \} \\}\par
5744 {\cf21         else \\}\par
5745 {\cf21             catchAssertionHandler.handleThrowingCallSkipped(); \\}\par
5746 {\cf21         INTERNAL_CATCH_REACT( catchAssertionHandler ) \\}\par
5747 {\cf21     \} while( false )}\par
}
}
{\xe \v INTERNAL_CATCH_THROWS_AS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_THROWS_AS( macroName,  exceptionType,  resultDisposition,  expr)}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{ \\\par
        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(expr) {\cf22 ", "} CATCH_INTERNAL_STRINGIFY(exceptionType), resultDisposition ); \\\par
        if( catchAssertionHandler.allowThrows() ) \\\par
            {\cf19 try} \{ \\\par
                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
                CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\\par
                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\\par
                static_cast<void>(expr); \\\par
                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\\par
            \} \\\par
            catch( exceptionType {\cf17 const}& ) \{ \\\par
                catchAssertionHandler.handleExceptionThrownAsExpected(); \\\par
            \} \\\par
            catch( ... ) \{ \\\par
                catchAssertionHandler.handleUnexpectedInflightException(); \\\par
            \} \\\par
        else \\\par
            catchAssertionHandler.handleThrowingCallSkipped(); \\\par
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \\\par
    \} {\cf19 while}( {\cf17 false} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5750 {\cf21 #define INTERNAL_CATCH_THROWS_AS( macroName, exceptionType, resultDisposition, expr ) \\}\par
5751 {\cf21     do \{ \\}\par
5752 {\cf21         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(expr) ", " CATCH_INTERNAL_STRINGIFY(exceptionType), resultDisposition ); \\}\par
5753 {\cf21         if( catchAssertionHandler.allowThrows() ) \\}\par
5754 {\cf21             try \{ \\}\par
5755 {\cf21                 CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
5756 {\cf21                 CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\}\par
5757 {\cf21                 CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\}\par
5758 {\cf21                 static_cast<void>(expr); \\}\par
5759 {\cf21                 CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
5760 {\cf21                 catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\}\par
5761 {\cf21             \} \\}\par
5762 {\cf21             catch( exceptionType const& ) \{ \\}\par
5763 {\cf21                 catchAssertionHandler.handleExceptionThrownAsExpected(); \\}\par
5764 {\cf21             \} \\}\par
5765 {\cf21             catch( ... ) \{ \\}\par
5766 {\cf21                 catchAssertionHandler.handleUnexpectedInflightException(); \\}\par
5767 {\cf21             \} \\}\par
5768 {\cf21         else \\}\par
5769 {\cf21             catchAssertionHandler.handleThrowingCallSkipped(); \\}\par
5770 {\cf21         INTERNAL_CATCH_REACT( catchAssertionHandler ) \\}\par
5771 {\cf21     \} while( false )}\par
}
}
{\xe \v INTERNAL_CATCH_THROWS_STR_MATCHES\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_THROWS_STR_MATCHES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_THROWS_STR_MATCHES( macroName,  resultDisposition,  matcher,  ...)}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{ \\\par
        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) {\cf22 ", "} CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \\\par
        if( catchAssertionHandler.allowThrows() ) \\\par
            {\cf19 try} \{ \\\par
                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
                CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\\par
                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\\par
                static_cast<void>(__VA_ARGS__); \\\par
                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\\par
            \} \\\par
            catch( ... ) \{ \\\par
                Catch::handleExceptionMatchExpr( catchAssertionHandler, matcher ); \\\par
            \} \\\par
        else \\\par
            catchAssertionHandler.handleThrowingCallSkipped(); \\\par
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \\\par
    \} {\cf19 while}( {\cf17 false} )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5777 {\cf21 #define INTERNAL_CATCH_THROWS_STR_MATCHES( macroName, resultDisposition, matcher, ... ) \\}\par
5778 {\cf21     do \{ \\}\par
5779 {\cf21         Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \\}\par
5780 {\cf21         if( catchAssertionHandler.allowThrows() ) \\}\par
5781 {\cf21             try \{ \\}\par
5782 {\cf21                 CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
5783 {\cf21                 CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\}\par
5784 {\cf21                 CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\}\par
5785 {\cf21                 static_cast<void>(__VA_ARGS__); \\}\par
5786 {\cf21                 CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
5787 {\cf21                 catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\}\par
5788 {\cf21             \} \\}\par
5789 {\cf21             catch( ... ) \{ \\}\par
5790 {\cf21                 Catch::handleExceptionMatchExpr( catchAssertionHandler, matcher ); \\}\par
5791 {\cf21             \} \\}\par
5792 {\cf21         else \\}\par
5793 {\cf21             catchAssertionHandler.handleThrowingCallSkipped(); \\}\par
5794 {\cf21         INTERNAL_CATCH_REACT( catchAssertionHandler ) \\}\par
5795 {\cf21     \} while( false )}\par
}
}
{\xe \v INTERNAL_CATCH_TRANSLATE_EXCEPTION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TRANSLATE_EXCEPTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature)}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )\par
}
}
{\xe \v INTERNAL_CATCH_TRANSLATE_EXCEPTION2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TRANSLATE_EXCEPTION2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName,  signature)}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} std::string translatorName( signature ); \\\par
    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\\par
    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\\par
    namespace\{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &translatorName ); \} \\\par
    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\\par
    static std::string translatorName( signature )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7209 {\cf21 #define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName, signature ) \\}\par
7210 {\cf21     static std::string translatorName( signature ); \\}\par
7211 {\cf21     CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\}\par
7212 {\cf21     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\}\par
7213 {\cf21     namespace\{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &translatorName ); \} \\}\par
7214 {\cf21     CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\}\par
7215 {\cf21     static std::string translatorName( signature )}\par
}
}
{\xe \v INTERNAL_CATCH_TRY\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TRY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TRY}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INTERNAL_CATCH_TYPE_GEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_TYPE_GEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_TYPE_GEN}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6442 {\cf21 #define INTERNAL_CATCH_TYPE_GEN\\}\par
6443 {\cf21     template<typename...> struct TypeList \{\};\\}\par
6444 {\cf21     template<typename...Ts>\\}\par
6445 {\cf21     constexpr auto get_wrapper() noexcept -> TypeList<Ts...> \{ return \{\}; \}\\}\par
6446 {\cf21     template<template<typename...> class...> struct TemplateTypeList\{\};\\}\par
6447 {\cf21     template<template<typename...> class...Cs>\\}\par
6448 {\cf21     constexpr auto get_wrapper() noexcept -> TemplateTypeList<Cs...> \{ return \{\}; \}\\}\par
6449 {\cf21     template<typename...>\\}\par
6450 {\cf21     struct append;\\}\par
6451 {\cf21     template<typename...>\\}\par
6452 {\cf21     struct rewrap;\\}\par
6453 {\cf21     template<template<typename...> class, typename...>\\}\par
6454 {\cf21     struct create;\\}\par
6455 {\cf21     template<template<typename...> class, typename>\\}\par
6456 {\cf21     struct convert;\\}\par
6457 {\cf21     \\}\par
6458 {\cf21     template<typename T> \\}\par
6459 {\cf21     struct append<T> \{ using type = T; \};\\}\par
6460 {\cf21     template< template<typename...> class L1, typename...E1, template<typename...> class L2, typename...E2, typename...Rest>\\}\par
6461 {\cf21     struct append<L1<E1...>, L2<E2...>, Rest...> \{ using type = typename append<L1<E1...,E2...>, Rest...>::type; \};\\}\par
6462 {\cf21     template< template<typename...> class L1, typename...E1, typename...Rest>\\}\par
6463 {\cf21     struct append<L1<E1...>, TypeList<mpl_::na>, Rest...> \{ using type = L1<E1...>; \};\\}\par
6464 {\cf21     \\}\par
6465 {\cf21     template< template<typename...> class Container, template<typename...> class List, typename...elems>\\}\par
6466 {\cf21     struct rewrap<TemplateTypeList<Container>, List<elems...>> \{ using type = TypeList<Container<elems...>>; \};\\}\par
6467 {\cf21     template< template<typename...> class Container, template<typename...> class List, class...Elems, typename...Elements>\\}\par
6468 {\cf21     struct rewrap<TemplateTypeList<Container>, List<Elems...>, Elements...> \{ using type = typename append<TypeList<Container<Elems...>>, typename rewrap<TemplateTypeList<Container>, Elements...>::type>::type; \};\\}\par
6469 {\cf21     \\}\par
6470 {\cf21     template<template <typename...> class Final, template< typename...> class...Containers, typename...Types>\\}\par
6471 {\cf21     struct create<Final, TemplateTypeList<Containers...>, TypeList<Types...>> \{ using type = typename append<Final<>, typename rewrap<TemplateTypeList<Containers>, Types...>::type...>::type; \};\\}\par
6472 {\cf21     template<template <typename...> class Final, template <typename...> class List, typename...Ts>\\}\par
6473 {\cf21     struct convert<Final, List<Ts...>> \{ using type = typename append<Final<>,TypeList<Ts>...>::type; \};}\par
}
}
{\xe \v INTERNAL_CATCH_UNIQUE_NAME\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_UNIQUE_NAME}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_UNIQUE_NAME( name)}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __COUNTER__ )\par
}
}
{\xe \v INTERNAL_CATCH_UNIQUE_NAME_LINE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_UNIQUE_NAME_LINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name,  line)}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line )\par
}
}
{\xe \v INTERNAL_CATCH_UNIQUE_NAME_LINE2\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_UNIQUE_NAME_LINE2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name,  line)}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid name##line\par
}
}
{\xe \v INTERNAL_CATCH_UNSCOPED_INFO\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_UNSCOPED_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_UNSCOPED_INFO( macroName,  log)}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     Catch::getResultCapture().emplaceUnscopedMessage( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )\par
}
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4048 {\cf21 #define INTERNAL_CATCH_UNSCOPED_INFO( macroName, log ) \\}\par
4049 {\cf21     Catch::getResultCapture().emplaceUnscopedMessage( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log )}\par
}
}
{\xe \v INTERNAL_CATCH_VA_NARGS_IMPL\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:INTERNAL_CATCH_VA_NARGS_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INTERNAL_CATCH_VA_NARGS_IMPL( _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  _10,  N,  ...)}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid N\par
}
}
{\xe \v METHOD_AS_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:METHOD_AS_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define METHOD_AS_TEST_CASE( method,  ...)}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )\par
}
}
{\xe \v REGISTER_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:REGISTER_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_TEST_CASE( Function,  ...)}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )\par
}
}
{\xe \v REQUIRE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE( ...)}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST( {\cf22 "REQUIRE"}, Catch::ResultDisposition::Normal, __VA_ARGS__  )\par
}
}
{\xe \v REQUIRE_FALSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE( ...)}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST( {\cf22 "REQUIRE_FALSE"}, Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )\par
}
}
{\xe \v REQUIRE_NOTHROW\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW( ...)}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_NO_THROW( {\cf22 "REQUIRE_NOTHROW"}, Catch::ResultDisposition::Normal, __VA_ARGS__ )\par
}
}
{\xe \v REQUIRE_THROWS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS( ...)}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_THROWS( {\cf22 "REQUIRE_THROWS"}, Catch::ResultDisposition::Normal, __VA_ARGS__ )\par
}
}
{\xe \v REQUIRE_THROWS_AS\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS( expr,  exceptionType)}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_THROWS_AS( {\cf22 "REQUIRE_THROWS_AS"}, exceptionType, Catch::ResultDisposition::Normal, expr )\par
}
}
{\xe \v SCENARIO\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO( ...)}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_CASE( {\cf22 "Scenario: "} __VA_ARGS__ )\par
}
}
{\xe \v SCENARIO_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:SCENARIO_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_METHOD( className,  ...)}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST_CASE_METHOD( className, {\cf22 "Scenario: "} __VA_ARGS__ )\par
}
}
{\xe \v SECTION\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:SECTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SECTION( ...)}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_SECTION( __VA_ARGS__ )\par
}
}
{\xe \v SizedUnsignedTypeHelper\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:SizedUnsignedTypeHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SizedUnsignedTypeHelper( TYPE)}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <>                                \\\par
    {\cf17 struct }SizedUnsignedType<sizeof( TYPE )> \{ \\\par
        {\cf17 using }type = TYPE;                     \\\par
    \}\par
}
}
{\xe \v SKIP\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:SKIP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SKIP( ...)}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MSG( {\cf22 "SKIP"}, Catch::ResultWas::ExplicitSkip, Catch::ResultDisposition::Normal, __VA_ARGS__ )\par
}
}
{\xe \v STATIC_CHECK\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:STATIC_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STATIC_CHECK( ...)}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 static_assert}(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )\par
}
}
{\xe \v STATIC_CHECK_FALSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:STATIC_CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STATIC_CHECK_FALSE( ...)}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 static_assert}( !(__VA_ARGS__), {\cf22 "!("} #__VA_ARGS__ {\cf22 ")"} ); SUCCEED( {\cf22 "!("} #__VA_ARGS__ {\cf22 ")"} )\par
}
}
{\xe \v STATIC_REQUIRE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:STATIC_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STATIC_REQUIRE( ...)}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 static_assert}(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )\par
}
}
{\xe \v STATIC_REQUIRE_FALSE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:STATIC_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STATIC_REQUIRE_FALSE( ...)}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 static_assert}( !(__VA_ARGS__), {\cf22 "!("} #__VA_ARGS__ {\cf22 ")"} ); SUCCEED( {\cf22 "!("} #__VA_ARGS__ {\cf22 ")"} )\par
}
}
{\xe \v SUCCEED\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:SUCCEED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SUCCEED( ...)}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MSG( {\cf22 "SUCCEED"}, Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_LIST_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_LIST_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_LIST_TEST_CASE( ...)}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)\par
}
}
{\xe \v TEMPLATE_LIST_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_LIST_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_LIST_TEST_CASE_METHOD( className,  ...)}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_PRODUCT_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_PRODUCT_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_PRODUCT_TEST_CASE( ...)}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_PRODUCT_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_PRODUCT_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className,  ...)}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className,  ...)}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_PRODUCT_TEST_CASE_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_PRODUCT_TEST_CASE_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_PRODUCT_TEST_CASE_SIG( ...)}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_TEST_CASE( ...)}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_TEST_CASE_METHOD( className,  ...)}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_TEST_CASE_METHOD_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_TEST_CASE_METHOD_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_TEST_CASE_METHOD_SIG( className,  ...)}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )\par
}
}
{\xe \v TEMPLATE_TEST_CASE_SIG\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEMPLATE_TEST_CASE_SIG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEMPLATE_TEST_CASE_SIG( ...)}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )\par
}
}
{\xe \v TEST_CASE\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE( ...)}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )\par
}
}
{\xe \v TEST_CASE_METHOD\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:TEST_CASE_METHOD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_METHOD( className,  ...)}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )\par
}
}
{\xe \v THEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define THEN( desc)}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( {\cf22 "     Then: "} << desc )\par
}
}
{\xe \v UNSCOPED_INFO\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:UNSCOPED_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define UNSCOPED_INFO( msg)}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_UNSCOPED_INFO( {\cf22 "UNSCOPED_INFO"}, msg )\par
}
}
{\xe \v WARN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN( msg)}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_MSG( {\cf22 "WARN"}, Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )\par
}
}
{\xe \v WHEN\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WHEN( desc)}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INTERNAL_CATCH_DYNAMIC_SECTION( {\cf22 "     When: "} << desc )\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções\par
\pard\plain 
{\xe \v operator""_catch_sr\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:operator""_catch_sr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto operator""_catch_sr (char const * rawChars, std::size_t size) -> {\b Catch::StringRef} {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 787                                                                                                        \{\par
788     {\cf19 return} Catch::StringRef( rawChars, size );\par
789 \}\par
}
}
{\xe \v operator<<\:catch_amalgamated.hpp}
{\xe \v catch_amalgamated.hpp\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::ostream & operator<< (std::ostream & , {\b Catch_global_namespace_dummy} )}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
}